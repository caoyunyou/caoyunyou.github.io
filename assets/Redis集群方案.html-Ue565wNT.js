import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as r,e as i}from"./app-KMmNggxv.js";const p={},o=i(`<h3 id="redis集群方案有三种" tabindex="-1"><a class="header-anchor" href="#redis集群方案有三种"><span>Redis集群方案有三种</span></a></h3><p><strong>主从复制</strong></p><p><strong>哨兵模式</strong></p><p><strong>Redis Culster 分片</strong></p><h2 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制"><span>主从复制：</span></a></h2><p>主从复制是由从节点发出的，先进行 sync ,然后进行</p><p>主从复制分为全量同步和增量同步两块</p><p>全量同步文字总结： 第一次主从链接时， 第一阶段：从节点会进行数据集校验(replid)，判断两个节点是否是同一个数据集，如果不是的话，从节点就是同步主节点的数据集ID， 执行replicaof建立链接 请求主节点进行数据同步 主节点会判断请求过来的replid和主节点的replid是否一致，即是否是第一次同步，如果是第一次同步的话，就返回主节点的replid 从节点接收replid，并修改节点replid为主节点的replid</p><p>第二阶段：RDB同步，主节点会生成对应的RDB文件，同时也会记录生成期间的执行信息，生成完毕后，推向从节点，让其加载 执行bgsave命令生成RDB文件 记录RDB生成期间的执行命令汇集到文件 repl_baklog 里 推送RDB文件到从节点 从节点清空当前的数据信息，加载RDB文件，保持和主节点的数据一致性</p><p>第三阶段：数据追加，会把生成RDB期间的执行信息集合成文件(repl_baklog)，然后推向从节点，让其保持和主节点的一致性 推送 repl_bak_log中的命令到从节点中 从节点接收并执行对应命令</p><p>注意点： 1.replid: 数据集的标记：标识数据集分组的唯一性，处于不同集群的Redis节点的replid是不一样的，对于统一分组的主从节点而言，replid都和主节点一致</p><pre><code>2.offset:
字面意思偏移量，这个表明的是RDB同步之后 repl_baklog 的执行行数，如果从节点小于主节点，就说明需要进行增量同步
</code></pre><p>增量同步： 其实过程都一样，只不过因为replid相同了，所以直接拿offset 来获取未同步的 repl_baklog 数据。</p>`,13),n=[o];function s(d,l){return t(),r("div",null,n)}const m=e(p,[["render",s],["__file","Redis集群方案.html.vue"]]),h=JSON.parse('{"path":"/notes/middleware/Redis/Redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88.html","title":"Redis集群方案","lang":"zh-CN","frontmatter":{"title":"Redis集群方案","date":"2024-04-14T00:00:00.000Z","description":"Redis集群方案有三种 主从复制 哨兵模式 Redis Culster 分片 主从复制： 主从复制是由从节点发出的，先进行 sync ,然后进行 主从复制分为全量同步和增量同步两块 全量同步文字总结： 第一次主从链接时， 第一阶段：从节点会进行数据集校验(replid)，判断两个节点是否是同一个数据集，如果不是的话，从节点就是同步主节点的数据集ID，...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/middleware/Redis/Redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Redis集群方案"}],["meta",{"property":"og:description","content":"Redis集群方案有三种 主从复制 哨兵模式 Redis Culster 分片 主从复制： 主从复制是由从节点发出的，先进行 sync ,然后进行 主从复制分为全量同步和增量同步两块 全量同步文字总结： 第一次主从链接时， 第一阶段：从节点会进行数据集校验(replid)，判断两个节点是否是同一个数据集，如果不是的话，从节点就是同步主节点的数据集ID，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T14:40:49.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-04-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-16T14:40:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis集群方案\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-16T14:40:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":3,"title":"Redis集群方案有三种","slug":"redis集群方案有三种","link":"#redis集群方案有三种","children":[]},{"level":2,"title":"主从复制：","slug":"主从复制","link":"#主从复制","children":[]}],"git":{"createdTime":1715776912000,"updatedTime":1715870449000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":2}]},"readingTime":{"minutes":1.83,"words":549},"filePathRelative":"notes/middleware/Redis/Redis集群方案.md","localizedDate":"2024年4月14日","excerpt":"<h3>Redis集群方案有三种</h3>\\n<p><strong>主从复制</strong></p>\\n<p><strong>哨兵模式</strong></p>\\n<p><strong>Redis Culster 分片</strong></p>\\n<h2>主从复制：</h2>\\n<p>主从复制是由从节点发出的，先进行 sync ,然后进行</p>\\n<p>主从复制分为全量同步和增量同步两块</p>\\n<p>全量同步文字总结：\\n第一次主从链接时，\\n第一阶段：从节点会进行数据集校验(replid)，判断两个节点是否是同一个数据集，如果不是的话，从节点就是同步主节点的数据集ID，\\n执行replicaof建立链接\\n请求主节点进行数据同步\\n主节点会判断请求过来的replid和主节点的replid是否一致，即是否是第一次同步，如果是第一次同步的话，就返回主节点的replid\\n从节点接收replid，并修改节点replid为主节点的replid</p>","autoDesc":true}');export{m as comp,h as data};
