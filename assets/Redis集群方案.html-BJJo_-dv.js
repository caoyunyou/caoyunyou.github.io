import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as i,e as t}from"./app-Jv8SdDP8.js";const a={},n=t('<h2 id="_1、主从复制" tabindex="-1"><a class="header-anchor" href="#_1、主从复制"><span>1、主从复制：</span></a></h2><h3 id="简述" tabindex="-1"><a class="header-anchor" href="#简述"><span>简述：</span></a></h3><p>主从复制其实就是隔离开读和写的，其有一个主节点和多个从节点。主节点负责写，从节点负责读</p><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点：</span></a></h3><ul><li>只有一个主节点，多个从节点</li><li>从节点和级联(Slave 可挂载其他 Slave)。</li><li>主节点负责写，从节点负责读+数据同步。</li><li>数据单向同步(主-&gt;从)，默认异步复制。</li></ul><h3 id="诞生原因" tabindex="-1"><a class="header-anchor" href="#诞生原因"><span>诞生原因：</span></a></h3><ul><li>单体Redis服务读写是在一起的，但是实际需求中，读和写的操作频次是不一致的，往往读的请求会更多。</li><li>单体Redis服务运行期间要是出现了故障，其服务就完全不可用了，对于线上业务而言，这个是完全无法接受的。</li><li>单体Redis服务数据只有一份，就算Redis服务做了持久化配置，但是如果其对应服务器的磁盘出现问题导致数据丢失，这些数据就无法挽回了。严重的可能导致对应生产业务断档。</li></ul><h3 id="启动流程" tabindex="-1"><a class="header-anchor" href="#启动流程"><span>启动流程：</span></a></h3><ol><li>服务使用redis.conf进行配置主从节点。</li><li>从节点注册到主节点上【配置主节点IP、端口、密码】</li><li>运行服务【主+从(从节点可动态新增)】</li><li>从节点向主节点发送<code>SYNC</code>命令【Redis2.8+使用<code>PSYNC</code>优化增量同步】，请求进行数据同步</li><li>主节点执行<code>BGSAVE</code>生成RDB文件，发送给从节点【并记录生成期间的新增命令】</li><li>主节点将命令写入复制积压缓冲区<code>repl_backlog</code>，从节点持续接收增量数据</li><li>主节点将所有新写入命令实时发送给从节点</li></ol><h3 id="配置规则" tabindex="-1"><a class="header-anchor" href="#配置规则"><span>配置规则：</span></a></h3><ul><li>从节点指定其所依赖的主节点或级联的从节点。</li><li>主节点设置<code>min-slaves-to-write</code>和<code>min-slaves-max-lag</code>来确保写入的安全性。</li></ul><h3 id="请求方式" tabindex="-1"><a class="header-anchor" href="#请求方式"><span>请求方式：</span></a></h3><ul><li>客户端直接读写主节点，或从节点（需业务实现读写分离）</li></ul><h3 id="故障转移" tabindex="-1"><a class="header-anchor" href="#故障转移"><span>故障转移：</span></a></h3><ul><li>无选举方式，主节点故障需要手动恢复（或依赖哨兵模式）</li></ul><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点：</span></a></h3><ul><li>读写分离，且同时也做到了数据备份。</li><li>支持读能力的拓展。</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点：</span></a></h3><ul><li>主节点单点故障需人工干预</li><li>异步复制可能导致数据不一致</li><li>主节点单点，写性能受限</li></ul><h3 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点"><span>注意点：</span></a></h3><ul><li>从节点过多会增加主节点同步压力</li><li>避免主节点同时作为从节点（级联需谨慎）</li></ul><h2 id="_2、哨兵模式-sentinel" tabindex="-1"><a class="header-anchor" href="#_2、哨兵模式-sentinel"><span>2、哨兵模式（Sentinel）：</span></a></h2><h3 id="简述-1" tabindex="-1"><a class="header-anchor" href="#简述-1"><span>简述：</span></a></h3><p>Sentinel模式下的Redis集群拥有Sentinel节点进行服务的监控，其可以进行自动容灾，如果主节点故障了，其会在其从节点中根据对应的有限原则选出主节点并恢复集群的写能力。</p><h3 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1"><span>特点：</span></a></h3><ul><li>监控主节点健康状态，实现自动故障转移。</li><li>哨兵节点独立部署，自身无数据存储。</li></ul><h3 id="诞生原因-1" tabindex="-1"><a class="header-anchor" href="#诞生原因-1"><span>诞生原因：</span></a></h3><ul><li>解决主从复制模式下，主节点故障转移问题。</li><li>提供高可用性保障。</li></ul><h3 id="启动流程-1" tabindex="-1"><a class="header-anchor" href="#启动流程-1"><span>启动流程：</span></a></h3><ol><li>启动主节点和从节点</li><li>启动多个 Sentinel 进程，配置监控主节点（<code>sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;</code>）</li><li>Sentinel 集群通过 Gossip 协议通信，判定主节点故障后触发选举和切换。</li></ol><h3 id="配置规则-1" tabindex="-1"><a class="header-anchor" href="#配置规则-1"><span>配置规则：</span></a></h3><ul><li>至少三个 Sentinel 节点（推荐奇数）</li><li><code>quorum</code>参数定义故障判定最小投票数。</li></ul><h3 id="请求方式-1" tabindex="-1"><a class="header-anchor" href="#请求方式-1"><span>请求方式：</span></a></h3><ul><li>客户端连接<code>Sentinel</code>获取主节点地址（需支持Sentine1协议的客户端库）</li></ul><h3 id="选举方式" tabindex="-1"><a class="header-anchor" href="#选举方式"><span>选举方式：</span></a></h3><ul><li>Sentinel 节点间基于 Raft 协议选举 Leader ，由 Leader 执行故障转移。</li></ul><h3 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点：</span></a></h3><ul><li>自动故障转移，高可用性</li><li>兼容主从模式的读写分离</li></ul><h3 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1"><span>缺点：</span></a></h3><ul><li>不支持数据分片，容量存储仍受单机限制</li><li>配置复杂度高</li></ul><h3 id="注意点-1" tabindex="-1"><a class="header-anchor" href="#注意点-1"><span>注意点：</span></a></h3><ul><li>Sentinel 节点应为奇数（如3/5个）避免脑裂。</li><li>网络分区可能导致误切，需合理设置超时参数。</li></ul><h2 id="_3、集群模式-cluster" tabindex="-1"><a class="header-anchor" href="#_3、集群模式-cluster"><span>3、集群模式（Cluster）：</span></a></h2><h3 id="简述-2" tabindex="-1"><a class="header-anchor" href="#简述-2"><span>简述：</span></a></h3><p>去中心化的Redis集群方式，有自动容灾能力。</p><h3 id="特点-2" tabindex="-1"><a class="header-anchor" href="#特点-2"><span>特点：</span></a></h3><ul><li>数据分片（16384 个哈希槽），支持水平拓展。</li><li>节点间 Gossip 协议通信，自动故障转移。</li></ul><h3 id="诞生原因-2" tabindex="-1"><a class="header-anchor" href="#诞生原因-2"><span>诞生原因：</span></a></h3><ul><li>解决单机内存和性能瓶颈。</li><li>实现分布式存储和高并发读写。</li></ul><h3 id="启动流程-2" tabindex="-1"><a class="header-anchor" href="#启动流程-2"><span>启动流程：</span></a></h3><ol><li>启动多个Redis示例并启用集群模式（<code>cluster-enabled yes</code>）。</li><li>使用<code>cluster meet</code>命令将节点加入到集群。</li><li>分配哈希槽（<code>cluster addlots</code>）或自动分配。</li></ol><h3 id="配置规则-2" tabindex="-1"><a class="header-anchor" href="#配置规则-2"><span>配置规则：</span></a></h3><ul><li>每个节点需配置<code>cluster-node-timeout</code>（故障判定时间）。</li><li>至少三个主节点（推荐6节点：3主+3从）。</li></ul><h3 id="请求方式-2" tabindex="-1"><a class="header-anchor" href="#请求方式-2"><span>请求方式：</span></a></h3><ul><li>客户端直连任意节点，通过重定向（MOVED/ASK）访问正确分片。</li><li>Smart Client 可缓存槽位映射，减少重定向。</li></ul><h3 id="选举方式-1" tabindex="-1"><a class="header-anchor" href="#选举方式-1"><span>选举方式：</span></a></h3><ul><li>主节点故障时，从节点发起选举（基于 Raft 变种算法）成为新主。</li></ul><h3 id="优点-2" tabindex="-1"><a class="header-anchor" href="#优点-2"><span>优点：</span></a></h3><ul><li>支持水平拓展和高并发。</li><li>自动数据分片和故障转移。</li></ul><h3 id="缺点-2" tabindex="-1"><a class="header-anchor" href="#缺点-2"><span>缺点：</span></a></h3><ul><li>客户端需兼容集群协议。</li><li>迁移槽位可能阻塞请求。</li><li>实务和跨槽位操作受限（需使用 Hash Tag）。</li></ul><h3 id="注意点-2" tabindex="-1"><a class="header-anchor" href="#注意点-2"><span>注意点：</span></a></h3><ul><li>避免大规模数据迁移导致性能抖动。</li><li>主从节点应分散在不同物理机，避免同时故障。</li><li>集群规模建议不超过 1000 节点。</li></ul><h2 id="总结对比" tabindex="-1"><a class="header-anchor" href="#总结对比"><span><strong>总结对比</strong></span></a></h2><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">适用场景</th><th style="text-align:left;">数据一致性</th><th style="text-align:left;">扩展性</th><th style="text-align:left;">复杂度</th></tr></thead><tbody><tr><td style="text-align:left;">主从复制</td><td style="text-align:left;">读写分离、数据备份</td><td style="text-align:left;">最终一致</td><td style="text-align:left;">垂直扩展读</td><td style="text-align:left;">低</td></tr><tr><td style="text-align:left;">哨兵模式</td><td style="text-align:left;">高可用主从架构</td><td style="text-align:left;">最终一致</td><td style="text-align:left;">无分片</td><td style="text-align:left;">中</td></tr><tr><td style="text-align:left;">集群模式</td><td style="text-align:left;">大数据量、高并发</td><td style="text-align:left;">分片内一致</td><td style="text-align:left;">水平扩展</td><td style="text-align:left;">高</td></tr></tbody></table>',65),s=[n];function d(h,r){return l(),i("div",null,s)}const p=e(a,[["render",d],["__file","Redis集群方案.html.vue"]]),u=JSON.parse('{"path":"/notes/middleware/Redis/Redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88.html","title":"Redis集群方案","lang":"zh-CN","frontmatter":{"title":"Redis集群方案","date":"2024-04-14T00:00:00.000Z","description":"1、主从复制： 简述： 主从复制其实就是隔离开读和写的，其有一个主节点和多个从节点。主节点负责写，从节点负责读 特点： 只有一个主节点，多个从节点 从节点和级联(Slave 可挂载其他 Slave)。 主节点负责写，从节点负责读+数据同步。 数据单向同步(主->从)，默认异步复制。 诞生原因： 单体Redis服务读写是在一起的，但是实际需求中，读和写的...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/middleware/Redis/Redis%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Redis集群方案"}],["meta",{"property":"og:description","content":"1、主从复制： 简述： 主从复制其实就是隔离开读和写的，其有一个主节点和多个从节点。主节点负责写，从节点负责读 特点： 只有一个主节点，多个从节点 从节点和级联(Slave 可挂载其他 Slave)。 主节点负责写，从节点负责读+数据同步。 数据单向同步(主->从)，默认异步复制。 诞生原因： 单体Redis服务读写是在一起的，但是实际需求中，读和写的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-11T03:23:41.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-04-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-11T03:23:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis集群方案\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-11T03:23:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、主从复制：","slug":"_1、主从复制","link":"#_1、主从复制","children":[{"level":3,"title":"简述：","slug":"简述","link":"#简述","children":[]},{"level":3,"title":"特点：","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"诞生原因：","slug":"诞生原因","link":"#诞生原因","children":[]},{"level":3,"title":"启动流程：","slug":"启动流程","link":"#启动流程","children":[]},{"level":3,"title":"配置规则：","slug":"配置规则","link":"#配置规则","children":[]},{"level":3,"title":"请求方式：","slug":"请求方式","link":"#请求方式","children":[]},{"level":3,"title":"故障转移：","slug":"故障转移","link":"#故障转移","children":[]},{"level":3,"title":"优点：","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点：","slug":"缺点","link":"#缺点","children":[]},{"level":3,"title":"注意点：","slug":"注意点","link":"#注意点","children":[]}]},{"level":2,"title":"2、哨兵模式（Sentinel）：","slug":"_2、哨兵模式-sentinel","link":"#_2、哨兵模式-sentinel","children":[{"level":3,"title":"简述：","slug":"简述-1","link":"#简述-1","children":[]},{"level":3,"title":"特点：","slug":"特点-1","link":"#特点-1","children":[]},{"level":3,"title":"诞生原因：","slug":"诞生原因-1","link":"#诞生原因-1","children":[]},{"level":3,"title":"启动流程：","slug":"启动流程-1","link":"#启动流程-1","children":[]},{"level":3,"title":"配置规则：","slug":"配置规则-1","link":"#配置规则-1","children":[]},{"level":3,"title":"请求方式：","slug":"请求方式-1","link":"#请求方式-1","children":[]},{"level":3,"title":"选举方式：","slug":"选举方式","link":"#选举方式","children":[]},{"level":3,"title":"优点：","slug":"优点-1","link":"#优点-1","children":[]},{"level":3,"title":"缺点：","slug":"缺点-1","link":"#缺点-1","children":[]},{"level":3,"title":"注意点：","slug":"注意点-1","link":"#注意点-1","children":[]}]},{"level":2,"title":"3、集群模式（Cluster）：","slug":"_3、集群模式-cluster","link":"#_3、集群模式-cluster","children":[{"level":3,"title":"简述：","slug":"简述-2","link":"#简述-2","children":[]},{"level":3,"title":"特点：","slug":"特点-2","link":"#特点-2","children":[]},{"level":3,"title":"诞生原因：","slug":"诞生原因-2","link":"#诞生原因-2","children":[]},{"level":3,"title":"启动流程：","slug":"启动流程-2","link":"#启动流程-2","children":[]},{"level":3,"title":"配置规则：","slug":"配置规则-2","link":"#配置规则-2","children":[]},{"level":3,"title":"请求方式：","slug":"请求方式-2","link":"#请求方式-2","children":[]},{"level":3,"title":"选举方式：","slug":"选举方式-1","link":"#选举方式-1","children":[]},{"level":3,"title":"优点：","slug":"优点-2","link":"#优点-2","children":[]},{"level":3,"title":"缺点：","slug":"缺点-2","link":"#缺点-2","children":[]},{"level":3,"title":"注意点：","slug":"注意点-2","link":"#注意点-2","children":[]}]},{"level":2,"title":"总结对比","slug":"总结对比","link":"#总结对比","children":[]}],"git":{"createdTime":1715776912000,"updatedTime":1741663421000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":4}]},"readingTime":{"minutes":4.77,"words":1431},"filePathRelative":"notes/middleware/Redis/Redis集群方案.md","localizedDate":"2024年4月14日","excerpt":"<h2>1、主从复制：</h2>\\n<h3>简述：</h3>\\n<p>主从复制其实就是隔离开读和写的，其有一个主节点和多个从节点。主节点负责写，从节点负责读</p>\\n<h3>特点：</h3>\\n<ul>\\n<li>只有一个主节点，多个从节点</li>\\n<li>从节点和级联(Slave 可挂载其他 Slave)。</li>\\n<li>主节点负责写，从节点负责读+数据同步。</li>\\n<li>数据单向同步(主-&gt;从)，默认异步复制。</li>\\n</ul>\\n<h3>诞生原因：</h3>\\n<ul>\\n<li>单体Redis服务读写是在一起的，但是实际需求中，读和写的操作频次是不一致的，往往读的请求会更多。</li>\\n<li>单体Redis服务运行期间要是出现了故障，其服务就完全不可用了，对于线上业务而言，这个是完全无法接受的。</li>\\n<li>单体Redis服务数据只有一份，就算Redis服务做了持久化配置，但是如果其对应服务器的磁盘出现问题导致数据丢失，这些数据就无法挽回了。严重的可能导致对应生产业务断档。</li>\\n</ul>","autoDesc":true}');export{p as comp,u as data};
