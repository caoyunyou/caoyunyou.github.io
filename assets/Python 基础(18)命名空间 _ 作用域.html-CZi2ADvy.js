import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-KMmNggxv.js";const t="/assets/649-CCH2nS91.jpg",p={},l=e('<h2 id="_1-命名空间" tabindex="-1"><a class="header-anchor" href="#_1-命名空间"><span>1.命名空间</span></a></h2><h3 id="_1-1-概念" tabindex="-1"><a class="header-anchor" href="#_1-1-概念"><span>1.1 概念</span></a></h3><p>命名空间（namespace）是名称到对象的映射，当前大部分命名空间都是通过 Python 字典来实现的，它的主要作用是避免项目中的名字冲突，每一个命名空间都是相对独立的，在不同的命名空间中可以同名，在相同的命名空间中不可以同名。</p><h3 id="_1-2-种类" tabindex="-1"><a class="header-anchor" href="#_1-2-种类"><span>1.2 种类</span></a></h3><p>命名空间有以下三种：</p><ul><li>内置：主要用来存放内置函数、异常等，比如：abs函数、BaseException 异常。</li><li>全局：指在模块中定义的名称，比如：类、函数等。</li><li>局部：指在函数中定义的名称，比如：函数的参数、在函数中定义的变量等。</li></ul><h3 id="_1-3-生命周期" tabindex="-1"><a class="header-anchor" href="#_1-3-生命周期"><span>1.3 生命周期</span></a></h3><p>通常在不同时刻创建的命名空间拥有不同的生命周期，看一下三种命名空间的生命周期：</p><ul><li>内置：在 Python 解释器启动时创建，退出时销毁。</li><li>全局：在模块定义被读入时创建，在Python解释器退出时销毁</li><li>局部：对于类，在 Python 解释器读到类定义时创建，类定义结束后销毁；对于函数，在函数被调用时创建，函数执行完成或出现未捕获的异常时销毁。</li></ul><h2 id="_2-作用域" tabindex="-1"><a class="header-anchor" href="#_2-作用域"><span>2.作用域</span></a></h2><h3 id="_2-1-概念" tabindex="-1"><a class="header-anchor" href="#_2-1-概念"><span>2.1 概念</span></a></h3><p>作用域是 Python 程序可以直接访问命名空间的文本区域（代码区域），名称的非限定引用会尝试在命名空间中查找名称，作用域是静态的，命名空间是随着解释器的执行动态产生的，因此在作用域中访问命名空间中的名字具有了动态性，即作用域被静态确定，被动态使用。</p><h3 id="_2-2-种类" tabindex="-1"><a class="header-anchor" href="#_2-2-种类"><span>2.2 种类</span></a></h3><p>Python 有如下四种作用域：</p><ul><li>局部：最先被搜索的最内部作用域，包含局部名称。</li><li>嵌套：根据嵌套层次由内向外搜索，包含非全局、非局部名称。</li><li>全局：倒数第二个被搜索，包含当前模块的全局名称。</li><li>内建：最后被搜索，包含内置名称的命名空间。</li></ul><p>作用域的搜索顺序通过下图直观的来看一下：</p><figure><img src="'+t+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>Python 中会按上图所示作用域由内向外去搜索名字。</p><p>再通过具体代码来对作用域作进一步了解，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token comment"># 全局作用域</span>
g <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 嵌套作用域</span>
    e <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 局部作用域</span>
        i <span class="token operator">=</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-global-nonlocal" tabindex="-1"><a class="header-anchor" href="#_2-3-global-nonlocal"><span>2.3 global &amp; nonlocal</span></a></h3><p>我们先来看一下全局变量与局部变量。</p><ul><li>全局变量：定义在函数外部的变量。</li><li>局部变量：定义在函数内部的变量。</li></ul><p>全局变量可以在整个程序范围内进行访问，而局部变量只能在函数内部访问。通过具体示例看一下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token comment"># 全局变量</span>
d <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># d 在这为局部变量</span>
    d <span class="token operator">=</span> a <span class="token operator">-</span> b
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;函数内 : &#39;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>

sub<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;函数外 : &#39;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>函数内 <span class="token punctuation">:</span>  <span class="token number">8</span>
函数外 <span class="token punctuation">:</span>  <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当内部作用域想要修改外部作用域的变量时，就要用到 <code>global</code> 和 <code>nonlocal</code> 关键字了，下面通过具体示例来了解一下。</p><p>如果我们想将上面示例中 <code>sub()</code> 函数中的 <code>d</code> 变量修改为全局变量，则需使用 <code>global</code> 关键字，示例如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token comment"># 全局变量</span>
d <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 使用 global 声明 d 为全局变量</span>
    <span class="token keyword">global</span> d
    d <span class="token operator">=</span> a <span class="token operator">-</span> b
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;函数内 : &#39;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>

sub<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;函数外 : &#39;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>函数内 <span class="token punctuation">:</span>  <span class="token number">8</span>
函数外 <span class="token punctuation">:</span>  <span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要修改嵌套作用域中的变量，则需用到 <code>nonlocal</code> 关键字。</p><p><strong>不使用 nonlocal</strong></p><p>我们先来看一下不使用 <code>nonlocal</code> 关键字的执行情况，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    d <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        d <span class="token operator">=</span> <span class="token number">2</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;inner：&#39;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>
    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;outer：&#39;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>
outer<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>inner：<span class="token number">2</span>
outer：<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 nonlocal</strong></p><p>再来看一下使用了 <code>nonlocal</code> 关键字的执行情况，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    d <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">nonlocal</span> d
        d <span class="token operator">=</span> <span class="token number">2</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;inner：&#39;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>
    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;outer：&#39;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>
outer<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>inner：<span class="token number">2</span>
outer：<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,43),o=[l];function i(c,d){return s(),a("div",null,o)}const k=n(p,[["render",i],["__file","Python 基础(18)命名空间 _ 作用域.html.vue"]]),m=JSON.parse('{"path":"/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(18)%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%20_%20%E4%BD%9C%E7%94%A8%E5%9F%9F.html","title":"Python 基础(18)命名空间 & 作用域","lang":"zh-CN","frontmatter":{"title":"Python 基础(18)命名空间 & 作用域","date":"2024-05-15T00:00:00.000Z","description":"1.命名空间 1.1 概念 命名空间（namespace）是名称到对象的映射，当前大部分命名空间都是通过 Python 字典来实现的，它的主要作用是避免项目中的名字冲突，每一个命名空间都是相对独立的，在不同的命名空间中可以同名，在相同的命名空间中不可以同名。 1.2 种类 命名空间有以下三种： 内置：主要用来存放内置函数、异常等，比如：abs函数、Ba...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(18)%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%20_%20%E4%BD%9C%E7%94%A8%E5%9F%9F.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Python 基础(18)命名空间 & 作用域"}],["meta",{"property":"og:description","content":"1.命名空间 1.1 概念 命名空间（namespace）是名称到对象的映射，当前大部分命名空间都是通过 Python 字典来实现的，它的主要作用是避免项目中的名字冲突，每一个命名空间都是相对独立的，在不同的命名空间中可以同名，在相同的命名空间中不可以同名。 1.2 种类 命名空间有以下三种： 内置：主要用来存放内置函数、异常等，比如：abs函数、Ba..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T14:40:49.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-05-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-16T14:40:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 基础(18)命名空间 & 作用域\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-16T14:40:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.命名空间","slug":"_1-命名空间","link":"#_1-命名空间","children":[{"level":3,"title":"1.1 概念","slug":"_1-1-概念","link":"#_1-1-概念","children":[]},{"level":3,"title":"1.2 种类","slug":"_1-2-种类","link":"#_1-2-种类","children":[]},{"level":3,"title":"1.3 生命周期","slug":"_1-3-生命周期","link":"#_1-3-生命周期","children":[]}]},{"level":2,"title":"2.作用域","slug":"_2-作用域","link":"#_2-作用域","children":[{"level":3,"title":"2.1 概念","slug":"_2-1-概念","link":"#_2-1-概念","children":[]},{"level":3,"title":"2.2 种类","slug":"_2-2-种类","link":"#_2-2-种类","children":[]},{"level":3,"title":"2.3 global & nonlocal","slug":"_2-3-global-nonlocal","link":"#_2-3-global-nonlocal","children":[]}]}],"git":{"createdTime":1715787719000,"updatedTime":1715870449000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":2}]},"readingTime":{"minutes":3.47,"words":1040},"filePathRelative":"notes/python/基础/Python 基础(18)命名空间 & 作用域.md","localizedDate":"2024年5月15日","excerpt":"<h2>1.命名空间</h2>\\n<h3>1.1 概念</h3>\\n<p>命名空间（namespace）是名称到对象的映射，当前大部分命名空间都是通过 Python 字典来实现的，它的主要作用是避免项目中的名字冲突，每一个命名空间都是相对独立的，在不同的命名空间中可以同名，在相同的命名空间中不可以同名。</p>\\n<h3>1.2 种类</h3>\\n<p>命名空间有以下三种：</p>\\n<ul>\\n<li>内置：主要用来存放内置函数、异常等，比如：abs函数、BaseException 异常。</li>\\n<li>全局：指在模块中定义的名称，比如：类、函数等。</li>\\n<li>局部：指在函数中定义的名称，比如：函数的参数、在函数中定义的变量等。</li>\\n</ul>","autoDesc":true}');export{k as comp,m as data};
