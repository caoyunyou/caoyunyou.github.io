import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-D0Nm-BYw.js";const t={},p=e(`<h2 id="_1-迭代器" tabindex="-1"><a class="header-anchor" href="#_1-迭代器"><span>1.迭代器</span></a></h2><h3 id="迭代" tabindex="-1"><a class="header-anchor" href="#迭代"><span>迭代</span></a></h3><p>我们知道 Python 中有一些对象可以通过 <code>for</code> 来循环遍历，比如：列表、元组、字符等，以字符串为例，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个遍历过程就是迭代</p><h3 id="可迭代对象" tabindex="-1"><a class="header-anchor" href="#可迭代对象"><span>可迭代对象</span></a></h3><p>可迭代对象需具有<code>__iter__()</code>方法，它们均可以使用<code>for</code>循环遍历，我们可以使用<code>isinstance()</code>方法来判断一个对象是否为可迭代对象，看下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h3><p>迭代器需要具有<code>__iter__()</code>和 <code>__next__()</code>两个方法，这两个方法共同组成了迭代器协议，通俗来讲迭代器就是一个可以记住遍历位置的对象，迭代器一定是可迭代的，反之不成立。</p><ul><li><code>__iter__()</code>：返回迭代器对象本身</li><li><code>__next__()</code>：返回下一项数据</li></ul><p>迭代器对象本质是一个数据流，它通过不断调用 <code>__next__()</code> 方法或被内置的 <code>next()</code> 方法调用返回下一项数据，当没有下一项数据时抛出 <code>StopIteration</code> 异常迭代结束。上面我们说的 <code>for</code> 循环语句的实现便是利用了迭代器。</p><p>我们试着自己来实现一个迭代器，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyIterator</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">&#39;自定义迭代器&#39;</span>
        self<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self

    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
            n <span class="token operator">=</span> self<span class="token punctuation">.</span>s<span class="token punctuation">[</span>self<span class="token punctuation">.</span>i<span class="token punctuation">]</span>
            self<span class="token punctuation">.</span>i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">return</span> n
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> StopIteration


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    my <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>MyIterator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> my<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-生成器" tabindex="-1"><a class="header-anchor" href="#_2-生成器"><span>2.生成器</span></a></h2><p>生成器是用来创建迭代器的工具，其写法与标准函数类似，不同之处在于返回时使用<code>yield</code>语句。</p><blockquote><p>yield 是一个关键字，作用和 return 差不多，差别在于 yield 返回的是一个生成器（在 Python 中，一边循环一边计算的机制，称为生成器），它的作用是：有利于减小服务器资源，在列表中所有数据存入内存，而生成器相当于一种方法而不是具体的信息，用多少取多少，占用内存小。</p></blockquote><p>生成器的创建方式有很多种，比如：使用<code>yield</code>语句，生成器表达式（可以简单的理解为是将列表的<code>[]</code>换成了<code>()</code>，特点是更加简洁，但不够灵活）。</p><p>案例1：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">yield</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">for</span> char <span class="token keyword">in</span> reverse<span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>o
l
l
e
H
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>案例2：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token comment"># 列表</span>
    lis <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>

    <span class="token comment"># 生成器</span>
    gen <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> g <span class="token keyword">in</span> gen<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">4</span>, <span class="token number">9</span>, <span class="token number">16</span><span class="token punctuation">]</span>
<span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">4</span>
<span class="token number">9</span>
<span class="token number">16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(t,[["render",i],["__file","Python 基础(16)迭代器与生成器.html.vue"]]),k=JSON.parse(`{"path":"/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(16)%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8.html","title":"Python 基础(16)迭代器与生成器","lang":"zh-CN","frontmatter":{"title":"Python 基础(16)迭代器与生成器","description":"1.迭代器 迭代 我们知道 Python 中有一些对象可以通过 for 来循环遍历，比如：列表、元组、字符等，以字符串为例，如下所示： 这个遍历过程就是迭代 可迭代对象 可迭代对象需具有__iter__()方法，它们均可以使用for循环遍历，我们可以使用isinstance()方法来判断一个对象是否为可迭代对象，看下示例： 迭代器 迭代器需要具有__i...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(16)%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Python 基础(16)迭代器与生成器"}],["meta",{"property":"og:description","content":"1.迭代器 迭代 我们知道 Python 中有一些对象可以通过 for 来循环遍历，比如：列表、元组、字符等，以字符串为例，如下所示： 这个遍历过程就是迭代 可迭代对象 可迭代对象需具有__iter__()方法，它们均可以使用for循环遍历，我们可以使用isinstance()方法来判断一个对象是否为可迭代对象，看下示例： 迭代器 迭代器需要具有__i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-15T15:41:59.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:modified_time","content":"2024-05-15T15:41:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 基础(16)迭代器与生成器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-15T15:41:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.迭代器","slug":"_1-迭代器","link":"#_1-迭代器","children":[{"level":3,"title":"迭代","slug":"迭代","link":"#迭代","children":[]},{"level":3,"title":"可迭代对象","slug":"可迭代对象","link":"#可迭代对象","children":[]},{"level":3,"title":"迭代器","slug":"迭代器","link":"#迭代器","children":[]}]},{"level":2,"title":"2.生成器","slug":"_2-生成器","link":"#_2-生成器","children":[]}],"git":{"createdTime":1715776912000,"updatedTime":1715787719000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":1}]},"readingTime":{"minutes":2.25,"words":675},"filePathRelative":"notes/python/基础/Python 基础(16)迭代器与生成器.md","localizedDate":"2024年5月15日","excerpt":"<h2>1.迭代器</h2>\\n<h3>迭代</h3>\\n<p>我们知道 Python 中有一些对象可以通过 <code>for</code> 来循环遍历，比如：列表、元组、字符等，以字符串为例，如下所示：</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">for</span> i <span class=\\"token keyword\\">in</span> <span class=\\"token string\\">'Hello'</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{d as comp,k as data};
