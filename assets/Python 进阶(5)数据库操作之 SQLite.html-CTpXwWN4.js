import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as t,e as a}from"./app-Jv8SdDP8.js";const e={},l=a(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1.简介</span></a></h2><p>SQLite 是一种嵌入式关系型数据库，其本质就是一个文件，它占用资源低、处理速度快、跨平台、可与 Python、Java 等多种编程语言结合使用。</p><p>SQLite 是一个进程内的库，可以自给自足、无服务器、无需配置、支持事务，Python 可以通过 sqlite3 模块与 SQLite3 集成（3 是版本号），Python 2.5.x 以上版本内置了 sqlite3 模块，我们可以直接使用。</p><h2 id="_2-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-数据类型"><span>2.数据类型</span></a></h2><p>存储类型是数据保存成文件后的表现形式，主要包括如下几种：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">NULL</td><td style="text-align:left;">空值</td></tr><tr><td style="text-align:left;">REAL</td><td style="text-align:left;">浮点数类型</td></tr><tr><td style="text-align:left;">TEXT</td><td style="text-align:left;">字符串，使用数据库编码（UTF-8、UTF-16BE 或 UTF-16LE）存储</td></tr><tr><td style="text-align:left;">BLOB</td><td style="text-align:left;">二进制表示</td></tr><tr><td style="text-align:left;">INTEGER</td><td style="text-align:left;">有符号的整数类型</td></tr></tbody></table><h3 id="_2-2-亲和类型" tabindex="-1"><a class="header-anchor" href="#_2-2-亲和类型"><span>2.2 亲和类型</span></a></h3><p>亲和类型是数据库表中列数据对应存储类型的倾向性，当数据插入时，字段的数据将会优先采用亲缘类型作为值的存储方式，主要包括如下几种：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">NONE</td><td style="text-align:left;">不做任何转换，直接以该数据所属的数据类型进行存储</td></tr><tr><td style="text-align:left;">TEXT</td><td style="text-align:left;">该列使用存储类型 NULL、TEXT 或 BLOB 存储数据</td></tr><tr><td style="text-align:left;">NUMERIC</td><td style="text-align:left;">该列可以包含使用所有五个存储类型的值</td></tr><tr><td style="text-align:left;">REAL</td><td style="text-align:left;">类似于 NUMERIC，区别是它会强制把整数值转换为浮点类型</td></tr><tr><td style="text-align:left;">INTEGER</td><td style="text-align:left;">类似于 NUMERIC，区别是在执行 CAST 表达式时</td></tr></tbody></table><h3 id="_2-3-声明类型" tabindex="-1"><a class="header-anchor" href="#_2-3-声明类型"><span>2.3 声明类型</span></a></h3><p>声明类型是我们写 SQL 时字段定义的类型，常用的声明类型与亲和类型具有如下对应关系：</p><table><thead><tr><th style="text-align:left;">声明类型</th><th style="text-align:left;">亲和类型</th></tr></thead><tbody><tr><td style="text-align:left;">BLOB</td><td style="text-align:left;">NONE</td></tr><tr><td style="text-align:left;">DOUBLE、FLOAT</td><td style="text-align:left;">REAL</td></tr><tr><td style="text-align:left;">VARCHAR、TEXT、CLOB</td><td style="text-align:left;">TEXT</td></tr><tr><td style="text-align:left;">INT、INTEGER、TINYINT、BIGINT</td><td style="text-align:left;">INTEGER</td></tr><tr><td style="text-align:left;">DECIMAL、BOOLEAN、DATE、DATETIME</td><td style="text-align:left;">NUMERIC</td></tr></tbody></table><h2 id="_3-基本使用" tabindex="-1"><a class="header-anchor" href="#_3-基本使用"><span>3.基本使用</span></a></h2><h3 id="_3-1-连接数据库" tabindex="-1"><a class="header-anchor" href="#_3-1-连接数据库"><span>3.1 连接数据库</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> sqlite3

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;test.db&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库不存在会进行自动创建，路径未指定的话，会创建在执行目录的同级</p><h3 id="_3-2-游标" tabindex="-1"><a class="header-anchor" href="#_3-2-游标"><span>3.2 游标</span></a></h3><p>连接数据库后，需要通过游标进行相应的 SQL 操作，所以要先创建游标</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 创建游标</span>
cs <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-建表" tabindex="-1"><a class="header-anchor" href="#_3-3-建表"><span>3.3 建表</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> sqlite3

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token comment"># 创建连接</span>
    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;test.db&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 创建游标</span>
    cs <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>

    cs<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">&#39;&#39;&#39;
    CREATE TABLE person(
        id varchar(20) PRIMARY KEY ,
        name varchar(20)
    );
    &#39;&#39;&#39;</span><span class="token punctuation">)</span>

    <span class="token comment"># 关闭游标</span>
    cs<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 提交事务</span>
    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 关闭连接</span>
    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-增删查改操作" tabindex="-1"><a class="header-anchor" href="#_3-4-增删查改操作"><span>3.4 增删查改操作</span></a></h3><p>注意点：占位符为<code>?</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> sqlite3

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token comment"># 创建连接</span>
    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;test.db&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 创建游标</span>
    cs <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    CREATE TABLE person(
        id varchar(20) PRIMARY KEY ,
        name varchar(20)
    );
    &#39;&#39;&#39;</span>

    <span class="token comment"># 新增</span>
    cs<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO person(\`id\`,\`name\`) VALUES(?,?)&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;caoyunyou&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    cs<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO person(\`id\`,\`name\`) VALUES(?,?)&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;yunyoucao&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># 查询</span>
    cs<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM person&quot;</span><span class="token punctuation">)</span>

    results <span class="token operator">=</span> cs<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> row <span class="token keyword">in</span> results<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;插入之后：&#39;</span><span class="token punctuation">,</span> row<span class="token punctuation">)</span>

    <span class="token comment"># 修改</span>
    cs<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;UPDATE person SET name = ? WHERE id = ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;ccc&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    cs<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM person WHERE id = ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    updateRes <span class="token operator">=</span> cs<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;修改之后&#39;</span><span class="token punctuation">,</span> updateRes<span class="token punctuation">)</span>

    <span class="token comment"># 删除</span>
    cs<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;DELETE FROM person WHERE id = ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    cs<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM person&quot;</span><span class="token punctuation">)</span>

    deleteRes <span class="token operator">=</span> cs<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> delRow <span class="token keyword">in</span> deleteRes<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;删除之后：&#39;</span><span class="token punctuation">,</span> delRow<span class="token punctuation">)</span>

    <span class="token comment"># 关闭游标</span>
    cs<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 提交事务</span>
    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 关闭连接</span>
    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),i=[l];function p(c,o){return s(),t("div",null,i)}const r=n(e,[["render",p],["__file","Python 进阶(5)数据库操作之 SQLite.html.vue"]]),v=JSON.parse('{"path":"/notes/python/%E8%BF%9B%E9%98%B6/Python%20%E8%BF%9B%E9%98%B6(5)%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%8B%20SQLite.html","title":"Python 进阶(5)数据库操作之 SQLite","lang":"zh-CN","frontmatter":{"title":"Python 进阶(5)数据库操作之 SQLite","date":"2024-05-18T00:00:00.000Z","description":"1.简介 SQLite 是一种嵌入式关系型数据库，其本质就是一个文件，它占用资源低、处理速度快、跨平台、可与 Python、Java 等多种编程语言结合使用。 SQLite 是一个进程内的库，可以自给自足、无服务器、无需配置、支持事务，Python 可以通过 sqlite3 模块与 SQLite3 集成（3 是版本号），Python 2.5.x 以上版...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/python/%E8%BF%9B%E9%98%B6/Python%20%E8%BF%9B%E9%98%B6(5)%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%8B%20SQLite.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Python 进阶(5)数据库操作之 SQLite"}],["meta",{"property":"og:description","content":"1.简介 SQLite 是一种嵌入式关系型数据库，其本质就是一个文件，它占用资源低、处理速度快、跨平台、可与 Python、Java 等多种编程语言结合使用。 SQLite 是一个进程内的库，可以自给自足、无服务器、无需配置、支持事务，Python 可以通过 sqlite3 模块与 SQLite3 集成（3 是版本号），Python 2.5.x 以上版..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-18T14:07:01.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-05-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-18T14:07:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 进阶(5)数据库操作之 SQLite\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-18T14:07:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2.数据类型","slug":"_2-数据类型","link":"#_2-数据类型","children":[{"level":3,"title":"2.2 亲和类型","slug":"_2-2-亲和类型","link":"#_2-2-亲和类型","children":[]},{"level":3,"title":"2.3 声明类型","slug":"_2-3-声明类型","link":"#_2-3-声明类型","children":[]}]},{"level":2,"title":"3.基本使用","slug":"_3-基本使用","link":"#_3-基本使用","children":[{"level":3,"title":"3.1 连接数据库","slug":"_3-1-连接数据库","link":"#_3-1-连接数据库","children":[]},{"level":3,"title":"3.2 游标","slug":"_3-2-游标","link":"#_3-2-游标","children":[]},{"level":3,"title":"3.3 建表","slug":"_3-3-建表","link":"#_3-3-建表","children":[]},{"level":3,"title":"3.4 增删查改操作","slug":"_3-4-增删查改操作","link":"#_3-4-增删查改操作","children":[]}]}],"git":{"createdTime":1716041221000,"updatedTime":1716041221000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":1}]},"readingTime":{"minutes":2.45,"words":736},"filePathRelative":"notes/python/进阶/Python 进阶(5)数据库操作之 SQLite.md","localizedDate":"2024年5月18日","excerpt":"<h2>1.简介</h2>\\n<p>SQLite 是一种嵌入式关系型数据库，其本质就是一个文件，它占用资源低、处理速度快、跨平台、可与 Python、Java 等多种编程语言结合使用。</p>\\n<p>SQLite 是一个进程内的库，可以自给自足、无服务器、无需配置、支持事务，Python 可以通过 sqlite3 模块与 SQLite3 集成（3 是版本号），Python 2.5.x 以上版本内置了 sqlite3 模块，我们可以直接使用。</p>\\n<h2>2.数据类型</h2>\\n<p>存储类型是数据保存成文件后的表现形式，主要包括如下几种：</p>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:left\\">类型</th>\\n<th style=\\"text-align:left\\">描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:left\\">NULL</td>\\n<td style=\\"text-align:left\\">空值</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">REAL</td>\\n<td style=\\"text-align:left\\">浮点数类型</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">TEXT</td>\\n<td style=\\"text-align:left\\">字符串，使用数据库编码（UTF-8、UTF-16BE 或 UTF-16LE）存储</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">BLOB</td>\\n<td style=\\"text-align:left\\">二进制表示</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">INTEGER</td>\\n<td style=\\"text-align:left\\">有符号的整数类型</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{r as comp,v as data};
