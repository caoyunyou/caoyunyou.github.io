import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as i,e as t}from"./app-49rSQJNM.js";const o={},s=t('<h2 id="redis数据类型" tabindex="-1"><a class="header-anchor" href="#redis数据类型"><span>Redis数据类型：</span></a></h2><h3 id="_1-string-字符串" tabindex="-1"><a class="header-anchor" href="#_1-string-字符串"><span><strong>1. String（字符串）</strong></span></a></h3><ul><li><strong>结构</strong>：二进制安全的字符串，最大长度为 512MB。</li><li><strong>核心命令</strong>： <ul><li><code>SET key value</code>：设置键值。</li><li><code>GET key</code>：获取值。</li><li><code>INCR key</code>：原子递增（仅限数字）。</li><li><code>APPEND key value</code>：追加字符串。</li><li><code>MSET/MGET</code>：批量操作。</li></ul></li><li><strong>应用场景</strong>： <ul><li><strong>缓存</strong>：存储热点数据（如用户会话、配置信息）。</li><li><strong>计数器</strong>：统计文章阅读量、点赞数（<code>INCR</code>）。</li><li><strong>分布式锁</strong>：通过 <code>SET key NX EX</code> 实现简单锁。</li><li><strong>共享 Session</strong>：集中管理分布式系统的用户会话。</li></ul></li><li><strong>注意事项</strong>： <ul><li>大字符串可能导致内存碎片。</li><li>使用 <code>MSET/MGET</code> 批量操作减少网络开销。</li></ul></li></ul><hr><h3 id="_2-hash-哈希表" tabindex="-1"><a class="header-anchor" href="#_2-hash-哈希表"><span><strong>2. Hash（哈希表）</strong></span></a></h3><ul><li><strong>结构</strong>：键值对集合，适合存储对象属性。</li><li><strong>核心命令</strong>： <ul><li><code>HSET key field value</code>：设置字段值。</li><li><code>HGET key field</code>：获取字段值。</li><li><code>HGETALL key</code>：获取所有字段。</li><li><code>HINCRBY key field increment</code>：字段值递增。</li></ul></li><li><strong>应用场景</strong>： <ul><li><strong>用户画像</strong>：存储用户的姓名、年龄、积分等属性。</li><li><strong>商品信息</strong>：存储商品详情的多字段数据。</li><li><strong>购物车管理</strong>：以用户 ID 为键，商品 ID 为字段，数量为值。</li></ul></li><li><strong>注意事项</strong>： <ul><li>字段数量过多时，查找效率可能下降。</li></ul></li></ul><hr><h3 id="_3-list-列表" tabindex="-1"><a class="header-anchor" href="#_3-list-列表"><span><strong>3. List（列表）</strong></span></a></h3><ul><li><strong>结构</strong>：有序、可重复的字符串集合，支持双向操作。</li><li><strong>核心命令</strong>： <ul><li><code>LPUSH/RPUSH key value</code>：在头部/尾部插入元素。</li><li><code>LPOP/RPOP key</code>：移除头部/尾部元素。</li><li><code>LRANGE key start stop</code>：获取指定范围元素。</li></ul></li><li><strong>应用场景</strong>： <ul><li><strong>消息队列</strong>：简单队列（<code>LPUSH</code> + <code>BRPOP</code>）。</li><li><strong>文章分页</strong>：存储用户时间线或文章列表。</li><li><strong>任务调度</strong>：异步任务的生产者-消费者模型。</li></ul></li><li><strong>注意事项</strong>： <ul><li>不支持复杂的消息确认机制（需结合其他工具）。</li></ul></li></ul><hr><h3 id="_4-set-集合" tabindex="-1"><a class="header-anchor" href="#_4-set-集合"><span><strong>4. Set（集合）</strong></span></a></h3><ul><li><strong>结构</strong>：无序、不重复的字符串集合，支持集合运算。</li><li><strong>核心命令</strong>： <ul><li><code>SADD key member</code>：添加成员。</li><li><code>SMEMBERS key</code>：获取所有成员。</li><li><code>SINTER/SUNION/SDIFF</code>：交集、并集、差集。</li></ul></li><li><strong>应用场景</strong>： <ul><li><strong>标签系统</strong>：存储用户兴趣标签，计算共同关注。</li><li><strong>抽奖活动</strong>：<code>SPOP</code> 随机抽取用户，保证唯一性。</li><li><strong>去重统计</strong>：记录独立 IP 或用户 ID。</li></ul></li><li><strong>注意事项</strong>： <ul><li>不支持排序操作。</li></ul></li></ul><hr><h3 id="_5-sorted-set-有序集合" tabindex="-1"><a class="header-anchor" href="#_5-sorted-set-有序集合"><span><strong>5. Sorted Set（有序集合）</strong></span></a></h3><ul><li><strong>结构</strong>：有序、不重复的字符串集合，每个成员关联一个分数。</li><li><strong>核心命令</strong>： <ul><li><code>ZADD key score member</code>：添加成员。</li><li><code>ZRANGE key start stop [WITHSCORES]</code>：按排名范围获取成员。</li><li><code>ZCARD key</code>：获取成员数量。</li></ul></li><li><strong>应用场景</strong>： <ul><li><strong>排行榜</strong>：游戏积分、视频热度、销量排名。</li><li><strong>延迟任务</strong>：按执行时间排序，定时触发任务。</li><li><strong>优先级队列</strong>：分数表示优先级，处理高优先级任务。</li></ul></li><li><strong>注意事项</strong>： <ul><li>分数更新需重新调用 <code>ZADD</code>。</li></ul></li></ul><hr><h3 id="_6-bitmap-位图" tabindex="-1"><a class="header-anchor" href="#_6-bitmap-位图"><span><strong>6. Bitmap（位图）</strong></span></a></h3><ul><li><strong>结构</strong>：基于 String 的二进制位操作，节省内存。</li><li><strong>核心命令</strong>： <ul><li><code>SETBIT key offset value</code>：设置位。</li><li><code>GETBIT key offset</code>：获取位。</li><li><code>BITCOUNT key</code>：统计 1 的个数。</li></ul></li><li><strong>应用场景</strong>： <ul><li><strong>用户签到</strong>：每日签到状态用 1 bit 表示，统计连续签到天数。</li><li><strong>在线状态</strong>：记录用户是否在线（0/1）。</li><li><strong>布隆过滤器</strong>：快速判断元素是否存在。</li></ul></li><li><strong>注意事项</strong>： <ul><li>位操作效率高，但需手动管理位偏移。</li></ul></li></ul><hr><h3 id="_7-hyperloglog-基数统计" tabindex="-1"><a class="header-anchor" href="#_7-hyperloglog-基数统计"><span><strong>7. HyperLogLog（基数统计）</strong></span></a></h3><ul><li><strong>结构</strong>：用于统计唯一值的数量（基数），误差率约 0.81%。</li><li><strong>核心命令</strong>： <ul><li><code>PFADD key element [element ...]</code>：添加元素。</li><li><code>PFCOUNT key</code>：统计基数。</li><li><code>PFMERGE destKey sourceKey [sourceKey ...]</code>：合并多个 HyperLogLog。</li></ul></li><li><strong>应用场景</strong>： <ul><li><strong>独立访客统计</strong>：统计网站 UV。</li><li><strong>去重计数</strong>：统计独立用户访问次数。</li></ul></li><li><strong>注意事项</strong>： <ul><li>误差率无法避免，适用于对精度要求不高的场景。</li></ul></li></ul><hr><h3 id="_8-geospatial-地理空间" tabindex="-1"><a class="header-anchor" href="#_8-geospatial-地理空间"><span><strong>8. Geospatial（地理空间）</strong></span></a></h3><ul><li><strong>结构</strong>：存储经纬度数据，支持地理范围查询。</li><li><strong>核心命令</strong>： <ul><li><code>GEOADD key longitude latitude member</code>：添加地理位置。</li><li><code>GEORADIUS key longitude latitude radius unit</code>：查询指定范围内的成员。</li><li><code>GEOHASH key member</code>：获取地理坐标的编码。</li></ul></li><li><strong>应用场景</strong>： <ul><li><strong>附近的人</strong>：查找附近的商户、用户。</li><li><strong>地图服务</strong>：提供基于位置的推荐。</li></ul></li><li><strong>注意事项</strong>： <ul><li>精度受限于地球曲率，适用于宏观范围查询。</li></ul></li></ul><hr><h3 id="_9-stream-流" tabindex="-1"><a class="header-anchor" href="#_9-stream-流"><span><strong>9. Stream（流）</strong></span></a></h3><ul><li><strong>结构</strong>：有序、可持久化的消息队列，支持消费者组。</li><li><strong>核心命令</strong>： <ul><li><code>XADD key * field value [field value ...]</code>：添加消息。</li><li><code>XREAD [GROUP group name] STREAMS key count</code>：读取消息。</li><li><code>XACK/XDEL</code>：确认/删除消息。</li></ul></li><li><strong>应用场景</strong>： <ul><li><strong>消息队列</strong>：支持复杂的消息确认和重试机制。</li><li><strong>日志聚合</strong>：集中管理分布式系统的日志。</li></ul></li><li><strong>注意事项</strong>： <ul><li>支持消费者组，适合分布式场景。</li></ul></li></ul><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点：</span></a></h2><p>优点：</p><ul><li>快，基于内存操作。</li><li>单线程，操作线程安全。其中的单线程是因为多路复用IO模型的关系，对于多个连接处理是单线程+事件驱动。具体处理并不是单线程的。</li><li>支持持久化</li></ul><p>缺点：【说实话，没感觉有什么】</p><ul><li>对join或其他结构化查询的支持就比较差。【但是这个本来就是k-v形式的，好像这也不叫问题】</li></ul><h2 id="io多路复用" tabindex="-1"><a class="header-anchor" href="#io多路复用"><span>io多路复用</span></a></h2><p>将用户socket对应的文件描述符（file description）注册进epoll，然后epoll帮你监听哪些socket上有消息到达。当某个socket可读或者可写的时候，它可以给你一个通知。只有当系统通知哪个描述符可读了，才去执行read操作，可以保证每次read都能读到有效数据。这样，多个描述符的I/O操作都能在一个线程内并发交替地顺序完成，这就叫I/O多路复用，这里的复用指的是复用同一个线程。</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景：</span></a></h2><ul><li>缓存热点数据</li><li>计数操作，浏览量、点赞量等</li><li>简单消息队列，利用Redis自身的发布/订阅模式实现简单消息队列【后面可以玩一玩，异步处理还是很好的，做一些异步的更新操作】</li><li>好友关系，利用集合的一些命令、比如求交集、并集、差集等。方便搞定一些共同好友、共同爱好之类的功能</li><li>限速器，超点处理、限流处理等。</li></ul><h2 id="memcached和redis的区别" tabindex="-1"><a class="header-anchor" href="#memcached和redis的区别"><span>Memcached和Redis的区别</span></a></h2><ul><li>Redis只使用单核，而Memcached可以使用多核。</li><li>Memcached数据类型单一</li><li>Memcached不支持持久化</li></ul>',38),n=[s];function r(d,a){return e(),i("div",null,n)}const u=l(o,[["render",r],["__file","Redis基础.html.vue"]]),h=JSON.parse('{"path":"/notes/middleware/Redis/Redis%E5%9F%BA%E7%A1%80.html","title":"Redis基础","lang":"zh-CN","frontmatter":{"title":"Redis基础","date":"2024-04-15T00:00:00.000Z","description":"Redis数据类型： 1. String（字符串） 结构：二进制安全的字符串，最大长度为 512MB。 核心命令： SET key value：设置键值。 GET key：获取值。 INCR key：原子递增（仅限数字）。 APPEND key value：追加字符串。 MSET/MGET：批量操作。 应用场景： 缓存：存储热点数据（如用户会话、配置信...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/middleware/Redis/Redis%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Redis基础"}],["meta",{"property":"og:description","content":"Redis数据类型： 1. String（字符串） 结构：二进制安全的字符串，最大长度为 512MB。 核心命令： SET key value：设置键值。 GET key：获取值。 INCR key：原子递增（仅限数字）。 APPEND key value：追加字符串。 MSET/MGET：批量操作。 应用场景： 缓存：存储热点数据（如用户会话、配置信..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-20T07:30:00.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-04-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-20T07:30:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-20T07:30:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Redis数据类型：","slug":"redis数据类型","link":"#redis数据类型","children":[{"level":3,"title":"1. String（字符串）","slug":"_1-string-字符串","link":"#_1-string-字符串","children":[]},{"level":3,"title":"2. Hash（哈希表）","slug":"_2-hash-哈希表","link":"#_2-hash-哈希表","children":[]},{"level":3,"title":"3. List（列表）","slug":"_3-list-列表","link":"#_3-list-列表","children":[]},{"level":3,"title":"4. Set（集合）","slug":"_4-set-集合","link":"#_4-set-集合","children":[]},{"level":3,"title":"5. Sorted Set（有序集合）","slug":"_5-sorted-set-有序集合","link":"#_5-sorted-set-有序集合","children":[]},{"level":3,"title":"6. Bitmap（位图）","slug":"_6-bitmap-位图","link":"#_6-bitmap-位图","children":[]},{"level":3,"title":"7. HyperLogLog（基数统计）","slug":"_7-hyperloglog-基数统计","link":"#_7-hyperloglog-基数统计","children":[]},{"level":3,"title":"8. Geospatial（地理空间）","slug":"_8-geospatial-地理空间","link":"#_8-geospatial-地理空间","children":[]},{"level":3,"title":"9. Stream（流）","slug":"_9-stream-流","link":"#_9-stream-流","children":[]}]},{"level":2,"title":"优缺点：","slug":"优缺点","link":"#优缺点","children":[]},{"level":2,"title":"io多路复用","slug":"io多路复用","link":"#io多路复用","children":[]},{"level":2,"title":"应用场景：","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"Memcached和Redis的区别","slug":"memcached和redis的区别","link":"#memcached和redis的区别","children":[]}],"git":{"createdTime":1715776912000,"updatedTime":1747726200000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":4}]},"readingTime":{"minutes":5.24,"words":1571},"filePathRelative":"notes/middleware/Redis/Redis基础.md","localizedDate":"2024年4月15日","excerpt":"<h2>Redis数据类型：</h2>\\n<h3><strong>1. String（字符串）</strong></h3>\\n<ul>\\n<li><strong>结构</strong>：二进制安全的字符串，最大长度为 512MB。</li>\\n<li><strong>核心命令</strong>：\\n<ul>\\n<li><code>SET key value</code>：设置键值。</li>\\n<li><code>GET key</code>：获取值。</li>\\n<li><code>INCR key</code>：原子递增（仅限数字）。</li>\\n<li><code>APPEND key value</code>：追加字符串。</li>\\n<li><code>MSET/MGET</code>：批量操作。</li>\\n</ul>\\n</li>\\n<li><strong>应用场景</strong>：\\n<ul>\\n<li><strong>缓存</strong>：存储热点数据（如用户会话、配置信息）。</li>\\n<li><strong>计数器</strong>：统计文章阅读量、点赞数（<code>INCR</code>）。</li>\\n<li><strong>分布式锁</strong>：通过 <code>SET key NX EX</code> 实现简单锁。</li>\\n<li><strong>共享 Session</strong>：集中管理分布式系统的用户会话。</li>\\n</ul>\\n</li>\\n<li><strong>注意事项</strong>：\\n<ul>\\n<li>大字符串可能导致内存碎片。</li>\\n<li>使用 <code>MSET/MGET</code> 批量操作减少网络开销。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{u as comp,h as data};
