import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-CTLYqPC-.js";const e={},p=t(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1 简介</span></a></h2><p>面向对象（OOP）是一种对现实世界理解和抽象的方法，对象的含义是指在现实生活中能够看得见摸得着的具体事物，一句比较经典的描述是一切皆对象，Python 是一门面向对象的语言，面向对象编程简单来说就是一种封装代码的方式。</p><p><strong>面向对象相关概念</strong></p><ul><li>类：描述具有相同属性和方法的集合，简单来说就是一个模板，通它来创建对象。</li><li>对象：类的实例。</li><li>方法：类中定义的函数。</li><li>类变量：定义在类中且在函数之外的变量，在所有实例化对象中公用。</li><li>局部变量：方法中定义的变量，只作用于当前实例。</li></ul><p><strong>面向对象三大特性</strong></p><ul><li>封装：隐藏对象的属性和实现细节，仅对外提供公共访问方式，提高复用性和安全性。</li><li>继承：一个类继承一个基类便可拥有基类的属性和方法，可提高代码的复用性。</li><li>多态：父类定义的引用变量可以指向子类的实例对象，提高了程序的拓展性。</li></ul><h2 id="_2-基本操作" tabindex="-1"><a class="header-anchor" href="#_2-基本操作"><span>2 基本操作</span></a></h2><h3 id="_2-1-类" tabindex="-1"><a class="header-anchor" href="#_2-1-类"><span>2.1 类</span></a></h3><p>Python 中类的定义使用 <code>class</code> 关键字，语法如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> 类名<span class="token punctuation">:</span>
    属性
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    方法
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如我们创建一个类Cat</p><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>
    <span class="token comment"># 属性</span>
    color <span class="token operator">=</span> <span class="token string">&#39;black&#39;</span>
    <span class="token comment">#构造方法</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token comment"># 自定义方法</span>
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>food<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>food <span class="token operator">=</span> food
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">&#39;正在吃&#39;</span><span class="token operator">+</span>food<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造方法<code>__init__()</code>会在实例化时自动调用。无论构造方法还是其他方法都需要将<code>self</code>作为第一个参数，他代表类的实例。</p><p>类创建好后，我们可以直接通过类名访问属性，格式为：<code>类名.属性名</code>，比如我们访问Cat类的color属性，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;color--&gt;&#39;</span><span class="token punctuation">,</span>Cat<span class="token punctuation">.</span>color<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面Cat类中定义的属性和方法都是公开的，除此之外我们还可以定义私有属性和方法，声明方式为：在属性名或方法名前加两条下划线，示例如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>
    __cid <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>
    <span class="token keyword">def</span> <span class="token function">__run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要强调一点是：外部不能访问私有属性和调用私有方法，自然<code>Cat.__cid</code>时会报错的。</p><h3 id="_2-2-对象" tabindex="-1"><a class="header-anchor" href="#_2-2-对象"><span>2.2 对象</span></a></h3><p>创建对象也称类的实例化，比如我们通过 Cat 类创建对象，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 创建对象</span>
cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建好对象后，我们就可以使用它访问属性和调用方法了，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 访问属性</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;name--&gt;&#39;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;color--&gt;&#39;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>color<span class="token punctuation">)</span>
<span class="token comment"># 调用方法</span>
c<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token string">&#39;鱼&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样对象 <code>c</code> 不能访问私有属性 <code>__cid</code> 及调用私有方法 <code>__run</code>，那我们会有这样一个疑问，这个私有属性和方法难道定义了却不能用吗？</p><p>们来一起看个例子，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>
    __cid <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>
    <span class="token keyword">def</span> <span class="token function">__run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;__cid是&#39;</span><span class="token operator">+</span>self<span class="token punctuation">.</span>__cid<span class="token operator">+</span><span class="token string">&#39;的猫&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;以&#39;</span><span class="token operator">+</span>speed<span class="token operator">+</span><span class="token string">&#39;的速度奔跑&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__run<span class="token punctuation">(</span>speed<span class="token punctuation">)</span>

c<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">&#39;50迈&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>__cid是<span class="token number">1</span>的猫 以<span class="token number">50</span>迈的速度奔跑
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过示例我们可以看出，在内部私有属性和方法是可以被访问和调用的。</p><h3 id="_2-3-继承" tabindex="-1"><a class="header-anchor" href="#_2-3-继承"><span>2.3 继承</span></a></h3><p>Python支持类的继承，而且支持多继承，语法格式为：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> 基类<span class="token punctuation">(</span>子类<span class="token number">1</span><span class="token punctuation">,</span>子类<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__int__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name


<span class="token comment"># 波斯猫</span>
<span class="token keyword">class</span> <span class="token class-name">PersianCat</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&#39;正在吃&#39;</span> <span class="token operator">+</span> food<span class="token punctuation">)</span>


<span class="token comment"># 加菲猫</span>
<span class="token keyword">class</span> <span class="token class-name">GarfieldCat</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&#39;正在以&#39;</span> <span class="token operator">+</span> speed <span class="token operator">+</span> <span class="token string">&#39;的速度奔跑&#39;</span><span class="token punctuation">)</span>


<span class="token comment"># 单继承</span>
<span class="token keyword">class</span> <span class="token class-name">SingleCat</span><span class="token punctuation">(</span>PersianCat<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>


<span class="token comment"># 多继承</span>
<span class="token keyword">class</span> <span class="token class-name">MultiCat</span><span class="token punctuation">(</span>PersianCat<span class="token punctuation">,</span> GarfieldCat<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    sc <span class="token operator">=</span> SingleCat<span class="token punctuation">(</span><span class="token string">&#39;波斯猫一号&#39;</span><span class="token punctuation">)</span>
    sc<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token string">&#39;鱼&#39;</span><span class="token punctuation">)</span>

    mc <span class="token operator">=</span> MultiCat<span class="token punctuation">(</span><span class="token string">&#39;波斯加菲猫一号&#39;</span><span class="token punctuation">)</span>
    mc<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token string">&#39;鱼&#39;</span><span class="token punctuation">)</span>
    mc<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">&#39;50迈&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果继承的父类方法不能满足我们的需求，这时子类可以重写父类方法，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SingleCat</span><span class="token punctuation">(</span>PersianCat<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">&#39;正在吃&#39;</span><span class="token operator">+</span>food<span class="token punctuation">,</span><span class="token string">&#39;十分钟后&#39;</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&#39;吃饱了&#39;</span><span class="token punctuation">)</span>
sc <span class="token operator">=</span> SingleCat<span class="token punctuation">(</span><span class="token string">&#39;波斯猫1号&#39;</span><span class="token punctuation">)</span>
sc<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token string">&#39;鱼&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","Python 基础(11)面向对象.html.vue"]]),k=JSON.parse('{"path":"/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(11)%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html","title":"Python 基础(11)面向对象","lang":"zh-CN","frontmatter":{"title":"Python 基础(11)面向对象","description":"1 简介 面向对象（OOP）是一种对现实世界理解和抽象的方法，对象的含义是指在现实生活中能够看得见摸得着的具体事物，一句比较经典的描述是一切皆对象，Python 是一门面向对象的语言，面向对象编程简单来说就是一种封装代码的方式。 面向对象相关概念 类：描述具有相同属性和方法的集合，简单来说就是一个模板，通它来创建对象。 对象：类的实例。 方法：类中定义...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(11)%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Python 基础(11)面向对象"}],["meta",{"property":"og:description","content":"1 简介 面向对象（OOP）是一种对现实世界理解和抽象的方法，对象的含义是指在现实生活中能够看得见摸得着的具体事物，一句比较经典的描述是一切皆对象，Python 是一门面向对象的语言，面向对象编程简单来说就是一种封装代码的方式。 面向对象相关概念 类：描述具有相同属性和方法的集合，简单来说就是一个模板，通它来创建对象。 对象：类的实例。 方法：类中定义..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-15T15:41:59.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:modified_time","content":"2024-05-15T15:41:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 基础(11)面向对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-15T15:41:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2 基本操作","slug":"_2-基本操作","link":"#_2-基本操作","children":[{"level":3,"title":"2.1 类","slug":"_2-1-类","link":"#_2-1-类","children":[]},{"level":3,"title":"2.2 对象","slug":"_2-2-对象","link":"#_2-2-对象","children":[]},{"level":3,"title":"2.3 继承","slug":"_2-3-继承","link":"#_2-3-继承","children":[]}]}],"git":{"createdTime":1715776912000,"updatedTime":1715787719000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":1}]},"readingTime":{"minutes":3.39,"words":1017},"filePathRelative":"notes/python/基础/Python 基础(11)面向对象.md","localizedDate":"2024年5月15日","excerpt":"<h2>1 简介</h2>\\n<p>面向对象（OOP）是一种对现实世界理解和抽象的方法，对象的含义是指在现实生活中能够看得见摸得着的具体事物，一句比较经典的描述是一切皆对象，Python 是一门面向对象的语言，面向对象编程简单来说就是一种封装代码的方式。</p>\\n<p><strong>面向对象相关概念</strong></p>\\n<ul>\\n<li>类：描述具有相同属性和方法的集合，简单来说就是一个模板，通它来创建对象。</li>\\n<li>对象：类的实例。</li>\\n<li>方法：类中定义的函数。</li>\\n<li>类变量：定义在类中且在函数之外的变量，在所有实例化对象中公用。</li>\\n<li>局部变量：方法中定义的变量，只作用于当前实例。</li>\\n</ul>","autoDesc":true}');export{r as comp,k as data};
