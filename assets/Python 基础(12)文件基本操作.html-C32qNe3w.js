import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-KMmNggxv.js";const e={},p=t(`<h2 id="_1-基本操作" tabindex="-1"><a class="header-anchor" href="#_1-基本操作"><span>1.基本操作</span></a></h2><h3 id="_1-1-创建" tabindex="-1"><a class="header-anchor" href="#_1-1-创建"><span>1.1 创建</span></a></h3><p>Python 使用 <code>open()</code>函数创建或打开文件，语法格式如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> buffering<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> closefd<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> opener<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明如下所示：</p><ul><li><strong>file</strong>：表示将要打开的文件的路径，也可以是要被封装的整数类型文件描述符。</li><li><strong>mode</strong>：是一个可选字符串，用于指定打开文件的模式，默认值是 <code>&#39;r&#39;</code>（以文本模式打开并读取）。可选模式如下：</li></ul><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">r</td><td style="text-align:left;">读取（默认）</td></tr><tr><td style="text-align:left;">w</td><td style="text-align:left;">写入，并先截断文件</td></tr><tr><td style="text-align:left;">x</td><td style="text-align:left;">排它性创建，如果文件已存在则失败</td></tr><tr><td style="text-align:left;">a</td><td style="text-align:left;">写入，如果文件存在则在末尾追加</td></tr><tr><td style="text-align:left;">b</td><td style="text-align:left;">二进制模式</td></tr><tr><td style="text-align:left;">t</td><td style="text-align:left;">文本模式（默认）</td></tr><tr><td style="text-align:left;">+</td><td style="text-align:left;">更新磁盘文件（读取并写入）</td></tr></tbody></table><ul><li><strong>buffering</strong>：是一个可选的整数，用于设置缓冲策略。</li><li><strong>encoding</strong>：用于解码或编码文件的编码的名称。</li><li><strong>errors</strong>：是一个可选的字符串，用于指定如何处理编码和解码错误（不能在二进制模式下使用）。</li><li><strong>newline</strong>：区分换行符。</li><li><strong>closefd</strong>：如果 closefd 为 False 并且给出了文件描述符而不是文件名，那么当文件关闭时，底层文件描述符将保持打开状态；如果给出文件名，closefd 为 True （默认值），否则将引发错误。</li><li><strong>opener</strong>：可以通过传递可调用的 opener 来使用自定义开启器。</li></ul><p>以txt格式文件为例，我们不手动创建文件，通过代码方式来创建，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行完上述代码，就为我们创建好了test.txt文件</p><h3 id="_1-2写入" tabindex="-1"><a class="header-anchor" href="#_1-2写入"><span>1.2写入</span></a></h3><p>上面我们创建的文件 test.txt 没有任何内容，我们向这个文件中写入一些信息，对于写操作，Python 文件对象提供了两个函数，如下所示：</p><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">write(str)</td><td style="text-align:left;">将字符串写入文件，返回写入字符长度</td></tr><tr><td style="text-align:left;">writelines(s)</td><td style="text-align:left;">向文件写入一个字符串列表</td></tr></tbody></table><p>我们使用这两个函数向文件中写入一些信息，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    wf <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
    wf<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;Tom\\n&#39;</span><span class="token punctuation">)</span>
    wf<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Hello\\n&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Python\\n&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># 关闭</span>
    wf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面我们使用了 close() 函数进行关闭操作，如果打开的文件忘记了关闭，可能会对程序造成一些隐患，为了避免这个问题的出现，可以使用 <code>with as</code> 语句，通过这种方式，程序执行完成后会自动关闭已经打开的文件。如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> wf<span class="token punctuation">:</span>
        wf<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;Tom\\n&#39;</span><span class="token punctuation">)</span>
        wf<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Hello\\n&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Python\\n&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-读取" tabindex="-1"><a class="header-anchor" href="#_1-3-读取"><span>1.3 读取</span></a></h3><p>之前我们已经向文件中写入了一些内容，现在我们读取一下，对于文件的读操作，Python 文件对象提供了三个函数，如下所示：</p><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">read(size)</td><td style="text-align:left;">读取指定的字节数，参数可选，无参或参数为负时读取所有</td></tr><tr><td style="text-align:left;">readline()</td><td style="text-align:left;">读取一行</td></tr><tr><td style="text-align:left;">readlines()</td><td style="text-align:left;">读取所有行并返回列表</td></tr></tbody></table><p>我们使用上面三个函数读取一下之前写入的内容，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rf<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;readline--&gt;&#39;</span><span class="token punctuation">,</span>rf<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;read--&gt;&#39;</span><span class="token punctuation">,</span>rf<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;readlines--&gt;&#39;</span><span class="token punctuation">,</span>rf<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-定位" tabindex="-1"><a class="header-anchor" href="#_2-4-定位"><span>2.4 定位</span></a></h3><p>Python 提供了两个与文件对象位置相关的函数，如下所示：</p><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">tell()</td><td style="text-align:left;">返回文件对象在文件中的当前位置</td></tr><tr><td style="text-align:left;">file.seek(offset[, whence])</td><td style="text-align:left;">将文件对象移动到指定的位置；offset 表示移动的偏移量；whence 为可选参数，值为 0 表示从文件开头起算（默认值）、值为 1 表示使用当前文件位置、值为 2 表示使用文件末尾作为参考点</td></tr></tbody></table><p>下面通过示例对上述函数作进一步了解，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb+&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b&#39;123456789&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 文件对象位置</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 移动到文件的第四个字节</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token comment"># 读取一个字节，文件对象向后移动一位</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 移动到倒数第二个字节</span>
    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-其他" tabindex="-1"><a class="header-anchor" href="#_2-5-其他"><span>2.5 其他</span></a></h3><p>除了上面那些函数，Python 文件对象还有一些其他方法，如：isatty() 和 truncate()，但它们的出场率较低，没什么存在感。</p><p>直接通过示例简单了解一下，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r+&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token comment"># 检测文件对象是否连接到终端设备</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>isatty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 截取两个字节</span>
    f<span class="token punctuation">.</span>truncate<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),o=[p];function l(c,i){return s(),a("div",null,o)}const d=n(e,[["render",l],["__file","Python 基础(12)文件基本操作.html.vue"]]),k=JSON.parse(`{"path":"/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(12)%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html","title":"Python 基础(12)文件基本操作","lang":"zh-CN","frontmatter":{"title":"Python 基础(12)文件基本操作","date":"2024-05-13T00:00:00.000Z","description":"1.基本操作 1.1 创建 Python 使用 open()函数创建或打开文件，语法格式如下所示： 参数说明如下所示： file：表示将要打开的文件的路径，也可以是要被封装的整数类型文件描述符。 mode：是一个可选字符串，用于指定打开文件的模式，默认值是 'r'（以文本模式打开并读取）。可选模式如下： buffering：是一个可选的整数，用于设置缓...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(12)%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Python 基础(12)文件基本操作"}],["meta",{"property":"og:description","content":"1.基本操作 1.1 创建 Python 使用 open()函数创建或打开文件，语法格式如下所示： 参数说明如下所示： file：表示将要打开的文件的路径，也可以是要被封装的整数类型文件描述符。 mode：是一个可选字符串，用于指定打开文件的模式，默认值是 'r'（以文本模式打开并读取）。可选模式如下： buffering：是一个可选的整数，用于设置缓..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T14:40:49.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-16T14:40:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 基础(12)文件基本操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-16T14:40:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.基本操作","slug":"_1-基本操作","link":"#_1-基本操作","children":[{"level":3,"title":"1.1 创建","slug":"_1-1-创建","link":"#_1-1-创建","children":[]},{"level":3,"title":"1.2写入","slug":"_1-2写入","link":"#_1-2写入","children":[]},{"level":3,"title":"1.3 读取","slug":"_1-3-读取","link":"#_1-3-读取","children":[]},{"level":3,"title":"2.4 定位","slug":"_2-4-定位","link":"#_2-4-定位","children":[]},{"level":3,"title":"2.5 其他","slug":"_2-5-其他","link":"#_2-5-其他","children":[]}]}],"git":{"createdTime":1715776912000,"updatedTime":1715870449000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":2}]},"readingTime":{"minutes":3.76,"words":1127},"filePathRelative":"notes/python/基础/Python 基础(12)文件基本操作.md","localizedDate":"2024年5月13日","excerpt":"<h2>1.基本操作</h2>\\n<h3>1.1 创建</h3>\\n<p>Python 使用 <code>open()</code>函数创建或打开文件，语法格式如下所示：</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">file</span><span class=\\"token punctuation\\">,</span> mode<span class=\\"token operator\\">=</span><span class=\\"token string\\">'r'</span><span class=\\"token punctuation\\">,</span> buffering<span class=\\"token operator\\">=</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> encoding<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span> errors<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span> newline<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span> closefd<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">,</span> opener<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{d as comp,k as data};
