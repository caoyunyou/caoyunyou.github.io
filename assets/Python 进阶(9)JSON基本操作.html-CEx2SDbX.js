import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Jv8SdDP8.js";const e={},p=t(`<h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，它具有简洁、清晰的层次结构，易于阅读和编写，还可以有效的提升网络传输效率。Python 标准库的 json 模块可以用来处理 JSON 格式数据的基本操作。</p><h2 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用"><span>2. 使用</span></a></h2><p>json 模块主要提供了 dump、dumps、load、loads 方法对 JSON 数据进行编解码。</p><h3 id="_2-1-dumps" tabindex="-1"><a class="header-anchor" href="#_2-1-dumps"><span>2.1 dumps</span></a></h3><p>json 模块的 dumps 方法可以将 Python 对象转为 JSON 格式字符串，以字典格式为例，看个示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> json

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;cyy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gender&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">}</span>
    j <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>d<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cyy&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;gender&quot;</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们发现上面的输出结果并不是格式化的 JSON，dumps 方法还可以对数据进行格式化，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> json

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;cyy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gender&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">}</span>
    j <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>d<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> skipkeys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> separators<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cyy&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;gender&quot;</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，除了字典类型外，其他一些 Python 类型也可转成 JSON 格式的字符串，它们之间有对应关系如下所示：</p><table><thead><tr><th style="text-align:left;">Python</th><th style="text-align:left;">JSON</th></tr></thead><tbody><tr><td style="text-align:left;">dict</td><td style="text-align:left;">object</td></tr><tr><td style="text-align:left;">list, tuple</td><td style="text-align:left;">array</td></tr><tr><td style="text-align:left;">str</td><td style="text-align:left;">string</td></tr><tr><td style="text-align:left;">iint, float, int 和 float 派生的枚举</td><td style="text-align:left;">number</td></tr><tr><td style="text-align:left;">True</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:left;">False</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">None</td><td style="text-align:left;">null</td></tr></tbody></table><p>再来看一下如何将 JSON 数据写入文件：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> json

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;cyy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gender&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">}</span>
    j <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>d<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> skipkeys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> separators<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>j<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-dump" tabindex="-1"><a class="header-anchor" href="#_2-2-dump"><span>2.2 dump</span></a></h3><p>json 模块的 dump 方法可以将 Python 对象序列化为 JSON 格式化流形式的文件类对象。</p><p>如果我们需要将数据写到文件里的时候，dump 方法会比 dumps 方法方便一点，看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> json

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;cyy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gender&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">}</span>

    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>d<span class="token punctuation">,</span> f<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们需要的数据格式为 JSON 格式字符串时，比如：将数据存入数据库，这时则需要用 dumps 方法。</p><h3 id="_2-3-loads" tabindex="-1"><a class="header-anchor" href="#_2-3-loads"><span>2.3 loads</span></a></h3><p>json 模块的 loads 方法可以将 JSON 格式数据转为 Python 对象，看个示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> json

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    d <span class="token operator">=</span> <span class="token string">&#39;{&quot;id&quot;: &quot;1&quot;, &quot;name&quot;: &quot;cyy&quot;, &quot;gender&quot;: &quot;male&quot;}&#39;</span>

    j <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>d<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>&#39;id&#39;<span class="token operator">:</span> &#39;<span class="token number">1</span>&#39;<span class="token punctuation">,</span> &#39;name&#39;<span class="token operator">:</span> &#39;cyy&#39;<span class="token punctuation">,</span> &#39;gender&#39;<span class="token operator">:</span> &#39;male&#39;<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两者之间转换的对应关系如下所示：</p><table><thead><tr><th style="text-align:left;">JSON</th><th style="text-align:left;">Python</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;">dict</td></tr><tr><td style="text-align:left;">array</td><td style="text-align:left;">list</td></tr><tr><td style="text-align:left;">string</td><td style="text-align:left;">str</td></tr><tr><td style="text-align:left;">number (int)</td><td style="text-align:left;">int</td></tr><tr><td style="text-align:left;">number (real)</td><td style="text-align:left;">float</td></tr><tr><td style="text-align:left;">true</td><td style="text-align:left;">True</td></tr><tr><td style="text-align:left;">false</td><td style="text-align:left;">False</td></tr><tr><td style="text-align:left;">null</td><td style="text-align:left;">None</td></tr></tbody></table><p>我们再来读取一下之前生成的 test.json 中数据并将其转为 Python 对象，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> json

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>&#39;id&#39;<span class="token operator">:</span> &#39;<span class="token number">1</span>&#39;<span class="token punctuation">,</span> &#39;name&#39;<span class="token operator">:</span> &#39;cyy&#39;<span class="token punctuation">,</span> &#39;gender&#39;<span class="token operator">:</span> &#39;male&#39;<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-4-load" tabindex="-1"><a class="header-anchor" href="#_2-4-load"><span>2.4 load</span></a></h3><p>json 模块的 load 方法将文件类对象转为 Python 对象，看个示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> json

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>&#39;id&#39;<span class="token operator">:</span> &#39;<span class="token number">1</span>&#39;<span class="token punctuation">,</span> &#39;name&#39;<span class="token operator">:</span> &#39;cyy&#39;<span class="token punctuation">,</span> &#39;gender&#39;<span class="token operator">:</span> &#39;male&#39;<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以看出 load 方法传的参数是文件对象，而 loads 方法参数传的是字符串。</p>`,39),o=[p];function l(i,c){return s(),a("div",null,o)}const d=n(e,[["render",l],["__file","Python 进阶(9)JSON基本操作.html.vue"]]),k=JSON.parse('{"path":"/notes/python/%E8%BF%9B%E9%98%B6/Python%20%E8%BF%9B%E9%98%B6(9)JSON%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html","title":"Python 进阶(9)JSON基本操作","lang":"zh-CN","frontmatter":{"title":"Python 进阶(9)JSON基本操作","date":"2024-05-20T00:00:00.000Z","description":"1. 概述 JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，它具有简洁、清晰的层次结构，易于阅读和编写，还可以有效的提升网络传输效率。Python 标准库的 json 模块可以用来处理 JSON 格式数据的基本操作。 2. 使用 json 模块主要提供了 dump、dumps、load、loads 方法对 J...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/python/%E8%BF%9B%E9%98%B6/Python%20%E8%BF%9B%E9%98%B6(9)JSON%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Python 进阶(9)JSON基本操作"}],["meta",{"property":"og:description","content":"1. 概述 JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，它具有简洁、清晰的层次结构，易于阅读和编写，还可以有效的提升网络传输效率。Python 标准库的 json 模块可以用来处理 JSON 格式数据的基本操作。 2. 使用 json 模块主要提供了 dump、dumps、load、loads 方法对 J..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-20T15:12:12.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-05-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-20T15:12:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 进阶(9)JSON基本操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-20T15:12:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 使用","slug":"_2-使用","link":"#_2-使用","children":[{"level":3,"title":"2.1 dumps","slug":"_2-1-dumps","link":"#_2-1-dumps","children":[]},{"level":3,"title":"2.2 dump","slug":"_2-2-dump","link":"#_2-2-dump","children":[]},{"level":3,"title":"2.3 loads","slug":"_2-3-loads","link":"#_2-3-loads","children":[]},{"level":3,"title":"2.4 load","slug":"_2-4-load","link":"#_2-4-load","children":[]}]}],"git":{"createdTime":1716217932000,"updatedTime":1716217932000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":1}]},"readingTime":{"minutes":2.45,"words":736},"filePathRelative":"notes/python/进阶/Python 进阶(9)JSON基本操作.md","localizedDate":"2024年5月20日","excerpt":"<h2>1. 概述</h2>\\n<p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，它具有简洁、清晰的层次结构，易于阅读和编写，还可以有效的提升网络传输效率。Python 标准库的 json 模块可以用来处理 JSON 格式数据的基本操作。</p>\\n<h2>2. 使用</h2>\\n<p>json 模块主要提供了 dump、dumps、load、loads 方法对 JSON 数据进行编解码。</p>\\n<h3>2.1 dumps</h3>\\n<p>json 模块的 dumps 方法可以将 Python 对象转为 JSON 格式字符串，以字典格式为例，看个示例：</p>","autoDesc":true}');export{d as comp,k as data};
