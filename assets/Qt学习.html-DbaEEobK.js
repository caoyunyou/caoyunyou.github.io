import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-D9XLFOuw.js";const p={},e=t(`<h2 id="qt介绍" tabindex="-1"><a class="header-anchor" href="#qt介绍"><span>Qt介绍：</span></a></h2><p>Qt是一个跨平台的图形用户界面应用程序</p><p>Qt 主函数简介</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;mainwindow.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QApplication&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLocale&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTranslator&gt;</span></span>

<span class="token comment">// argc 命令行变量的数量 argv 命令行变量的数组</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 应用程序对象</span>
    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 国际化配置</span>
    QTranslator translator<span class="token punctuation">;</span>
    <span class="token keyword">const</span> QStringList uiLanguages <span class="token operator">=</span> <span class="token class-name">QLocale</span><span class="token double-colon punctuation">::</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uiLanguages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>locale <span class="token operator">:</span> uiLanguages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> QString baseName <span class="token operator">=</span> <span class="token string">&quot;01BaseProject_&quot;</span> <span class="token operator">+</span> <span class="token function">QLocale</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>translator<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;:/i18n/&quot;</span> <span class="token operator">+</span> baseName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            a<span class="token punctuation">.</span><span class="token function">installTranslator</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>translator<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 窗口对象 继承 QWidget</span>
    MainWindow w<span class="token punctuation">;</span>
    <span class="token comment">// 需要调用 show 方法，才能显示</span>
    w<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 让应用程序进入消息循环机制，即一直显示窗口</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QT项目窗口头文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MAINWINDOW_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAINWINDOW_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow&gt;</span></span>

<span class="token comment">// 定义 QT的命名空间</span>
QT_BEGIN_NAMESPACE
<span class="token keyword">namespace</span> Ui <span class="token punctuation">{</span>
<span class="token keyword">class</span> <span class="token class-name">MainWindow</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
QT_END_NAMESPACE

<span class="token comment">// 继承窗口类</span>
<span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">{</span>
    Q_OBJECT <span class="token comment">// 这个是一个宏，允许类中使用信号和槽的机制</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MainWindow</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造函数</span>
    <span class="token operator">~</span><span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>MainWindow <span class="token operator">*</span>ui<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// MAINWINDOW_H</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>快捷键：</p><p><code>ctrl + i</code> 自动对齐</p><p><code>F4</code> 头文件与源文件切换</p><p>页面设置案例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;mainwindow.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;./ui_mainwindow.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;qpushbutton.h&gt;</span></span>

<span class="token class-name">MainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">MainWindow</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
    <span class="token punctuation">,</span> <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>MainWindow<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ui<span class="token operator">-&gt;</span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建按钮</span>
    <span class="token comment">// 1. 先创建 在设置显示区域 ，这个现在反倒会变得和窗口一样大 需要设置重新设置大小</span>
    QPushButton <span class="token operator">*</span> btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 按钮大小设置</span>
    btn<span class="token operator">-&gt;</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置显示区域</span>
    btn<span class="token operator">-&gt;</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 参数设置</span>
    btn<span class="token operator">-&gt;</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;看一下&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.创建的时候就制定了显示区域</span>
    <span class="token comment">// 这种方式会使得显示区域缩小到控件大小 不过现在好像不会</span>
    QPushButton <span class="token operator">*</span> btn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">&quot;按钮&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btn2<span class="token operator">-&gt;</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 重置窗口大小</span>
    <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置窗口标题</span>
    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">&quot;曹云友的第一个QT程序&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token class-name">MainWindow</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象树" tabindex="-1"><a class="header-anchor" href="#对象树"><span>对象树：</span></a></h2><p>在Qt 创建组件时设置了parent 就可以把对象放到对象树上</p><p>操作：<code>setParent(父级类)</code></p><h2 id="信号和槽" tabindex="-1"><a class="header-anchor" href="#信号和槽"><span>信号和槽：</span></a></h2><p>所谓的信号和槽就是一个信号发送和接收，以及信号处理</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 信号槽案例</span>
<span class="token comment">// 参数1：信号发送方，参数2：信号发送方的触发方式【信号】，参数3：信号接收方，参数4：信号接收方的操作【处理的槽函数】</span>
<span class="token function">connect</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span><span class="token operator">&amp;</span>QPushButton<span class="token double-colon punctuation">::</span>clicked<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>QWidget<span class="token double-colon punctuation">::</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark><code>emit</code></mark> 发射信号</p><p>自定义信号和槽</p><p>自定义信号：</p><p>​ 返回void</p><p>​ 需要声明，不能实现</p><p>自定义槽函数</p><p>​ 返回void</p><p>​ 需要声明和实现</p><p>函数指针：C++知识补充</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">//格式：</span>
返回类型 <span class="token punctuation">(</span>类<span class="token double-colon punctuation">::</span> <span class="token operator">*</span> 指针名称<span class="token punctuation">)</span><span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>类名<span class="token double-colon punctuation">::</span>方法名<span class="token punctuation">;</span>
<span class="token comment">// 示例</span>
<span class="token keyword">void</span> <span class="token punctuation">(</span>Teacher<span class="token double-colon punctuation">::</span> <span class="token operator">*</span> tcTreate<span class="token punctuation">)</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token operator">&amp;</span>Teacher<span class="token double-colon punctuation">::</span>treate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当自定义信号和槽出现了重载时需要使用函数指针指定所需要的函数，防止产生函数同名的冲突</p><p>QString 转 char *</p><p>需要两步，先转 byteArray 再转为 char *</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>QSrting对象<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>信号不止可以连接槽，也可以连接信号，一个信号触发时，会递推触它所连接的信号</p><p>断开链接：参数和链接一致，方法名叫做<code>disconnect</code></p><p>信号和槽如果参数列表不一致会导致连接不成功，只有在参数列表一致，或者信号的参数为1，另一个连接的信号或者槽的参数个数为0才行</p><p>Lambda表达式：</p><p>C++11之后支持Lambda表达式</p><p>格式：<code>[函数对象参数](操作符重载函数)mutable-&gt;返回值{函数体}</code></p><p>1、函数对象参数：</p><p><code>[]</code>,标识一个 Lambda，这个不能省略，而且参数最多只能使用到那些在Lambda表达式定义之前所在作用域范围内可见的局部变量</p><p>空：没有任何参数</p><p><code>=</code> ：函数体内可以使用Lambda所在作用范围内所有可见的局部变量</p><p><code>&amp;</code> ： 和上面一样，但是用的时引用传递</p><p><code>this</code> ： 。。。</p><p>单个参数</p><p>单个参数的引用</p><p>2、操作符重载函数</p><p>3、可修改标识符：<code>mutable</code> 修饰值传递的变量，加上之后就能改了，改的是拷贝，不是本体</p><p>4、函数返回类型<code>-&gt;返回类型</code> 这个可以省略，编译器会自动推断</p><p>5、函数体：{}</p><p>如果连接的第三个参数是 this 第四个是 lambda表达式的化，第三个参数可以省略不写</p><h2 id="qmainwindow" tabindex="-1"><a class="header-anchor" href="#qmainwindow"><span>QMainWindow:</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 添加菜单栏 菜单栏只能有一个</span>
QMenuBar <span class="token operator">*</span> bar <span class="token operator">=</span>  <span class="token function">menuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setMenuBar</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
QMenu <span class="token operator">*</span>file<span class="token operator">=</span>  bar<span class="token operator">-&gt;</span><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">&quot;文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
QMenu <span class="token operator">*</span>setting<span class="token operator">=</span> bar<span class="token operator">-&gt;</span><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">&quot;设置&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

file<span class="token operator">-&gt;</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">&quot;打开文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token operator">-&gt;</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">&quot;打开项目&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token operator">-&gt;</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">&quot;窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 添加工具栏，可以有多个</span>
QToolBar <span class="token operator">*</span> toolBar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QToolBar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 将 ToolBar 添加到窗口</span>
<span class="token function">addToolBar</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>LeftToolBarArea<span class="token punctuation">,</span>toolBar<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 设置ToolBar 可以停靠的区域</span>
toolBar<span class="token operator">-&gt;</span><span class="token function">setAllowedAreas</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>LeftToolBarArea<span class="token operator">|</span>Qt<span class="token double-colon punctuation">::</span>RightToolBarArea<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 设置不能浮动，只能靠边停靠</span>
toolBar<span class="token operator">-&gt;</span><span class="token function">setFloatable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 设置是否可以移动 关闭之后就不能进行拖拽了</span>
toolBar<span class="token operator">-&gt;</span><span class="token function">setMovable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 添加选项</span>
toolBar<span class="token operator">-&gt;</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">&quot;新建项目&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
toolBar<span class="token operator">-&gt;</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">&quot;打开文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 添加分割线</span>
toolBar<span class="token operator">-&gt;</span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 添加控件</span>
toolBar<span class="token operator">-&gt;</span><span class="token function">addWidget</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">&quot;点一下啦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//状态栏 最多一个</span>
QStatusBar <span class="token operator">*</span> stBar <span class="token operator">=</span>  <span class="token function">statusBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置状态栏</span>
<span class="token function">setStatusBar</span><span class="token punctuation">(</span>stBar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 放标签控件</span>
QLabel  <span class="token operator">*</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">&quot;提示信息&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stBar<span class="token operator">-&gt;</span><span class="token function">addWidget</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>

QLabel  <span class="token operator">*</span> label2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">&quot;右侧提示信息&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stBar<span class="token operator">-&gt;</span><span class="token function">addPermanentWidget</span><span class="token punctuation">(</span>label2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 铆接部件 （浮动窗口） 可以有多个</span>
QDockWidget <span class="token operator">*</span> dockWidget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QDockWidget</span><span class="token punctuation">(</span><span class="token string">&quot;浮动窗口&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将浮动窗口加入</span>
<span class="token function">addDockWidget</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AllDockWidgetAreas<span class="token punctuation">,</span>dockWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 中心部件设置</span>
QTextEdit <span class="token operator">*</span> edit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setCentralWidget</span><span class="token punctuation">(</span>edit<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资源文件添加" tabindex="-1"><a class="header-anchor" href="#资源文件添加"><span>资源文件添加：</span></a></h2><p>引用方式 <code>:/前缀/文件名</code></p><h2 id="模态和非模态对话框" tabindex="-1"><a class="header-anchor" href="#模态和非模态对话框"><span>模态和非模态对话框：</span></a></h2><p>模态对话框：显示期间不能对其他窗口进行操作</p><p>非模态对话框：可以对其他窗口进行操作</p><p>以 <code>.exec()</code> 方式创建的就是模态对话框，它会处于一种阻塞状态，就像main 文件中的App创建的方法一样</p><p>非模态的直接 <code>.show()</code>就行了</p><p>非模态对话框如果是在lambda表达式中创建的话，那么他关闭的时候不会进行销毁，多次的长时间的点击可能造成内存泄漏，所以需要设置他的属性：在关闭时删除，即可解决问题</p><p><code>myDialog-&gt;setAttribute(Qt::WA_DeleteOnClose);</code></p><h2 id="消息对话框" tabindex="-1"><a class="header-anchor" href="#消息对话框"><span>消息对话框：</span></a></h2><p>QMessageBox</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 第一个参数是父级，第二个是标题，第三个是内容，第四个是窗口选项Button，第五个是默认选中项</span>
<span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">question</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">&quot;标题&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;内容&quot;</span><span class="token punctuation">,</span>QMessageBox<span class="token double-colon punctuation">::</span>Save<span class="token operator">|</span>QMessageBox<span class="token double-colon punctuation">::</span>Cancel<span class="token punctuation">,</span>QMessageBox<span class="token double-colon punctuation">::</span>Cancel<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个有不同类型的按钮</p><p>返回的是点击的按钮类型</p><h2 id="文件选择框" tabindex="-1"><a class="header-anchor" href="#文件选择框"><span>文件选择框：</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 返回的是选择的文件路径</span>
<span class="token comment">// 参数1：父级，参数2：标题，参数3：默认路径，参数4：过滤的文件格式</span>
QString fileName <span class="token operator">=</span>  <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">&quot;标题&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;E:\\\\Desktop&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;(*.exe)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="按钮" tabindex="-1"><a class="header-anchor" href="#按钮"><span>按钮：</span></a></h2><p>QPushButton 常见选择按钮</p><p>QToolButton 通常用于显示图片，可以通过风格修改 toolButtonStyle 就可以选择不同的样式，也可以设置突起的样式</p><p>QRadioButton 单选按钮</p><p>QCheckBox 多选按钮，有三个状态 0 未选 1 半选 2 全选</p><h2 id="qlistwidget" tabindex="-1"><a class="header-anchor" href="#qlistwidget"><span>QListWidget:</span></a></h2><p>一个列表，类似于 HTML 中的ul，内容默认为垂直排序</p><p>内容项为：QListWidgetItem 这个还可以设置对齐方式实现不同的布局效果</p><p>QStringList 可以通过 左移运算符 <code>&lt;&lt;</code> 进行赋值和拼接</p><h2 id="qtreewidget" tabindex="-1"><a class="header-anchor" href="#qtreewidget"><span>QTreeWidget:</span></a></h2><h2 id="自定义控件封装" tabindex="-1"><a class="header-anchor" href="#自定义控件封装"><span>自定义控件封装：</span></a></h2><h2 id="qt中的鼠标事件" tabindex="-1"><a class="header-anchor" href="#qt中的鼠标事件"><span>Qt中的鼠标事件：</span></a></h2><p>实现对应的虚函数，可以监听对应的鼠标动作</p><p>Qt中的字符串格式化：</p><p><code>QString a = QString(&quot;字符串格式化 x=%1 , y=%2&quot; ).arg(&quot;10&quot;,&quot;12&quot;);</code></p><p>设置鼠标追踪的话，就可以在不点击的情况下可以捕获移动事件</p><h2 id="定时器" tabindex="-1"><a class="header-anchor" href="#定时器"><span>定时器：</span></a></h2><p><code>QTimer::timerEvent(QTimerEvent * ev)</code></p><p>重写对应的虚函数：<code>virtual void timerEvent(QTimerEvent * ev);</code></p><p>定时器需要启动</p><p><code>startTimer(时间间隔);</code></p><p>定时器区分：</p><p>根据timerId 区分 这个可以在 event 中获取</p><p>定时器第二种方式：</p><p>创建一个QTimer对象，并加入到对象树上</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 创建定时器</span>
QTimer <span class="token operator">*</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTimer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 启动定时器</span>
timer<span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">connect</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span><span class="token operator">&amp;</span>QTimer<span class="token double-colon punctuation">::</span>timeout<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">// 定时器内容 执行的操作</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个QTimer对象实现一个定时器执行操作</p><h2 id="事件分发器" tabindex="-1"><a class="header-anchor" href="#事件分发器"><span>事件分发器：</span></a></h2><p><code>bool event(QEvent * ev);</code></p><p>利用 ev-&gt;type() == 事件类型进行判断</p><p>例子：<code>ev-&gt;type() == QEvent::MouseMove</code></p><p>如果返回的是 true 那么就由用户自己处理，不向下分发，即：不触发对应的事件函数</p><p>C++补充知识：静态类型转换</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 格式：需要转换的类型 = static_cast&lt;需要转换的类型&gt;(对象);</span>
Myclass <span class="token operator">*</span> mc <span class="token operator">=</span>  <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Myclass <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件过滤器" tabindex="-1"><a class="header-anchor" href="#事件过滤器"><span>事件过滤器：</span></a></h2><p>事件过滤发生在事件分发之前</p><p>逻辑和事件分发器一致：如果返回的是true 那么由用户自己处理</p><p>事件过滤器处理步骤：</p><p>​ 1.给组件安装过滤器</p><p>​ <code>ui-&gt;组件-&gt;installEventFilter(this)</code></p><p>​ 2.重写事件过滤函数</p><p>​ <code>bool eventFilter(QObject * ,QEvent *)</code></p><h2 id="绘图" tabindex="-1"><a class="header-anchor" href="#绘图"><span>绘图：</span></a></h2><p>绘图事件：<code>void paintEvent()</code></p><p>声明一个画家对象 QPainter painter(this) this 指定绘图设备</p><p>画线、画圆、画矩形、画文字</p><p>设置画笔 QPen 设置画笔宽度、风格</p><p>设置画刷 QBrush 设置画刷 风格</p><h2 id="绘图高级设置" tabindex="-1"><a class="header-anchor" href="#绘图高级设置"><span>绘图高级设置：</span></a></h2><p>抗锯齿</p><p><code>setRenderHint(QPainter::类型)</code></p><p>画板移动</p><p><code>painter.translate(x方向移动距离,y方向移动距离)</code></p><h2 id="手动调用绘图事件" tabindex="-1"><a class="header-anchor" href="#手动调用绘图事件"><span>手动调用绘图事件：</span></a></h2><p>调用 update()</p><p>屏幕参数：this-&gt;width(); this-&gt;height()</p><h2 id="绘图设备" tabindex="-1"><a class="header-anchor" href="#绘图设备"><span>绘图设备：</span></a></h2><p>QPixmap QImage QBitmap(黑白色) QPicture QWidget</p><p>QPixmap 对不同平台做了显示的优化</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>QPixmap <span class="token function">pix</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pix<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>填充颜色<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 利用画家 王 oix 上画画</span>
QPainter painter <span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">&amp;</span> pix<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 保存到磁盘上</span>
pix<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">&quot;磁盘路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QImage 可以对像素进行访问</p><p>使用和 QPixmap差不多 QImage img(300,300,QImage::Format_RGB32);</p><p>其他流程和 QPixmap 一样</p><p>可以对限售股进行修改 img.setPixel(i,j,value);</p><p>QPicture 记录和重现绘图指令</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>QPicture pic<span class="token punctuation">;</span>
painter<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pic<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//保存</span>
pic<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">&quot;磁盘路径，以及文件后缀&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 重现绘图操作</span>
painter<span class="token punctuation">.</span><span class="token function">drawPicture</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>pic<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="qfile对文件进行读写" tabindex="-1"><a class="header-anchor" href="#qfile对文件进行读写"><span>QFile对文件进行读写：</span></a></h2><p>QFile进行读写操作</p><p>QFile file(path 文件路径)</p><p>读：</p><p>​ file.open(打开方式) QIODevice::readOnly</p><p>​ 全部读取 file.readAll() 按行读 file.readLine() atend()判断是否读到文件尾</p><p>​ 默认支持编码格式 utf-8</p><p>​ 利用编码格式类 指定格式 QTextCodeC</p><p>​ QTextCodec * codec = QtextCodec::codecForName(&quot;gbk&quot;);</p><p>​ ui-&gt;textEdit-&gt;setText(codec-&gt;toUnicode(array));</p><p>​ 文件对象关闭 close();</p><p>写：</p><p>​ file.open(QIOEdvice::writeOnly)</p><p>​ file.write(内容)</p><p>​ file.close() 关闭</p><h2 id="qfileinfo-获取文件信息" tabindex="-1"><a class="header-anchor" href="#qfileinfo-获取文件信息"><span>QFileInfo 获取文件信息：</span></a></h2><p>大小，文件名，后缀，路径。。。</p>`,151),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","Qt学习.html.vue"]]),k=JSON.parse('{"path":"/notes/c__/Qt%E5%AD%A6%E4%B9%A0.html","title":"QT学习","lang":"zh-CN","frontmatter":{"title":"QT学习","date":"2024-01-05T00:00:00.000Z","description":"Qt介绍： Qt是一个跨平台的图形用户界面应用程序 Qt 主函数简介 QT项目窗口头文件 快捷键： ctrl + i 自动对齐 F4 头文件与源文件切换 页面设置案例： 对象树： 在Qt 创建组件时设置了parent 就可以把对象放到对象树上 操作：setParent(父级类) 信号和槽： 所谓的信号和槽就是一个信号发送和接收，以及信号处理 emit ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/c__/Qt%E5%AD%A6%E4%B9%A0.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"QT学习"}],["meta",{"property":"og:description","content":"Qt介绍： Qt是一个跨平台的图形用户界面应用程序 Qt 主函数简介 QT项目窗口头文件 快捷键： ctrl + i 自动对齐 F4 头文件与源文件切换 页面设置案例： 对象树： 在Qt 创建组件时设置了parent 就可以把对象放到对象树上 操作：setParent(父级类) 信号和槽： 所谓的信号和槽就是一个信号发送和接收，以及信号处理 emit ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T14:40:49.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-01-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-16T14:40:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"QT学习\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-16T14:40:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Qt介绍：","slug":"qt介绍","link":"#qt介绍","children":[]},{"level":2,"title":"对象树：","slug":"对象树","link":"#对象树","children":[]},{"level":2,"title":"信号和槽：","slug":"信号和槽","link":"#信号和槽","children":[]},{"level":2,"title":"QMainWindow:","slug":"qmainwindow","link":"#qmainwindow","children":[]},{"level":2,"title":"资源文件添加：","slug":"资源文件添加","link":"#资源文件添加","children":[]},{"level":2,"title":"模态和非模态对话框：","slug":"模态和非模态对话框","link":"#模态和非模态对话框","children":[]},{"level":2,"title":"消息对话框：","slug":"消息对话框","link":"#消息对话框","children":[]},{"level":2,"title":"文件选择框：","slug":"文件选择框","link":"#文件选择框","children":[]},{"level":2,"title":"按钮：","slug":"按钮","link":"#按钮","children":[]},{"level":2,"title":"QListWidget:","slug":"qlistwidget","link":"#qlistwidget","children":[]},{"level":2,"title":"QTreeWidget:","slug":"qtreewidget","link":"#qtreewidget","children":[]},{"level":2,"title":"自定义控件封装：","slug":"自定义控件封装","link":"#自定义控件封装","children":[]},{"level":2,"title":"Qt中的鼠标事件：","slug":"qt中的鼠标事件","link":"#qt中的鼠标事件","children":[]},{"level":2,"title":"定时器：","slug":"定时器","link":"#定时器","children":[]},{"level":2,"title":"事件分发器：","slug":"事件分发器","link":"#事件分发器","children":[]},{"level":2,"title":"事件过滤器：","slug":"事件过滤器","link":"#事件过滤器","children":[]},{"level":2,"title":"绘图：","slug":"绘图","link":"#绘图","children":[]},{"level":2,"title":"绘图高级设置：","slug":"绘图高级设置","link":"#绘图高级设置","children":[]},{"level":2,"title":"手动调用绘图事件：","slug":"手动调用绘图事件","link":"#手动调用绘图事件","children":[]},{"level":2,"title":"绘图设备：","slug":"绘图设备","link":"#绘图设备","children":[]},{"level":2,"title":"QFile对文件进行读写：","slug":"qfile对文件进行读写","link":"#qfile对文件进行读写","children":[]},{"level":2,"title":"QFileInfo 获取文件信息：","slug":"qfileinfo-获取文件信息","link":"#qfileinfo-获取文件信息","children":[]}],"git":{"createdTime":1715776912000,"updatedTime":1715870449000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":2}]},"readingTime":{"minutes":8.55,"words":2565},"filePathRelative":"notes/c++/Qt学习.md","localizedDate":"2024年1月5日","excerpt":"<h2>Qt介绍：</h2>\\n<p>Qt是一个跨平台的图形用户界面应用程序</p>\\n<p>Qt 主函数简介</p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">\\"mainwindow.h\\"</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;QApplication&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;QLocale&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;QTranslator&gt;</span></span>\\n\\n<span class=\\"token comment\\">// argc 命令行变量的数量 argv 命令行变量的数组</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> argc<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>argv<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 应用程序对象</span>\\n    QApplication <span class=\\"token function\\">a</span><span class=\\"token punctuation\\">(</span>argc<span class=\\"token punctuation\\">,</span> argv<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 国际化配置</span>\\n    QTranslator translator<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">const</span> QStringList uiLanguages <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">QLocale</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">system</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">uiLanguages</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> QString <span class=\\"token operator\\">&amp;</span>locale <span class=\\"token operator\\">:</span> uiLanguages<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">const</span> QString baseName <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"01BaseProject_\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token function\\">QLocale</span><span class=\\"token punctuation\\">(</span>locale<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>translator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">load</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\":/i18n/\\"</span> <span class=\\"token operator\\">+</span> baseName<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">installTranslator</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>translator<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 窗口对象 继承 QWidget</span>\\n    MainWindow w<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 需要调用 show 方法，才能显示</span>\\n    w<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">show</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 让应用程序进入消息循环机制，即一直显示窗口</span>\\n    <span class=\\"token keyword\\">return</span> a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exec</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
