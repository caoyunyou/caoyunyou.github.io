import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-Jv8SdDP8.js";const p={},t=e(`<h2 id="单一职责原则-srp" tabindex="-1"><a class="header-anchor" href="#单一职责原则-srp"><span>单一职责原则（SRP）：</span></a></h2><p>SRP：<strong>Single Responsibility Principle</strong></p><h3 id="核心思想" tabindex="-1"><a class="header-anchor" href="#核心思想"><span>核心思想：</span></a></h3><p>一个类（或模块）应该只有一种职责，仅有一个引起它变化的原因。</p><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例：</span></a></h3><p>假设有一个 <code>User</code> 类，负责用户数据的管理和用户身份验证：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token comment">// 职责1：用户数据管理</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUserToDatabase</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">loadUserFromDatabase</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

    <span class="token comment">// 职责2：用户身份验证</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题</strong>：数据管理和身份验证是两个独立的职责，修改数据库逻辑可能影响认证功能。【即违反了：仅有一个引起引起其变化的原因】 <strong>改进</strong>：拆分为 <code>UserRepository</code>（负责数据存储）和 <code>UserAuthenticator</code>（负责认证）。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">UserAuthenticator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用：</span></a></h3><p>避免“上帝类”，例如：将数据持久化和业务逻辑拆分到不同类中。</p><h3 id="设计模式体现" tabindex="-1"><a class="header-anchor" href="#设计模式体现"><span>设计模式体现：</span></a></h3><p>工厂模式（分离对象创建与使用）</p><h2 id="开闭原则-ocp" tabindex="-1"><a class="header-anchor" href="#开闭原则-ocp"><span>开闭原则（OCP）：</span></a></h2><p>OCP：<strong>Open-Closed Principle</strong></p><h3 id="核心思想-1" tabindex="-1"><a class="header-anchor" href="#核心思想-1"><span>核心思想：</span></a></h3><p>对扩展开放，对修改关闭。</p><h3 id="案例-1" tabindex="-1"><a class="header-anchor" href="#案例-1"><span>案例：</span></a></h3><p>假设有一个图形绘制系统，需要支持多种形状（圆形、正方形）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ShapeDrawer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;circle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;square&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">drawSquare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题</strong>：新增形状（如三角形）需要修改 <code>drawShape</code> 方法。【每次功能拓展都需要对原先代码进行修改调整】 <strong>改进</strong>：通过抽象接口扩展：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ShapeDrawer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        shape<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无需修改代码即可支持新形状</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用-1" tabindex="-1"><a class="header-anchor" href="#应用-1"><span>应用：</span></a></h3><p>通过抽象类（接口/抽象类）拓展功能，而非修改已有代码。</p><h3 id="设计模式体现-1" tabindex="-1"><a class="header-anchor" href="#设计模式体现-1"><span>设计模式体现：</span></a></h3><p>策略模式（新增策略无需修改上下文）、装饰器模式（动态添加功能）。</p><h2 id="里氏替换原则-lsp" tabindex="-1"><a class="header-anchor" href="#里氏替换原则-lsp"><span>里氏替换原则（LSP）：</span></a></h2><p>LSP：<strong>Liskov Substitution Principle</strong></p><h3 id="核心思想-2" tabindex="-1"><a class="header-anchor" href="#核心思想-2"><span>核心思想：</span></a></h3><p>子类必须能替换父类且不破环程序逻辑。</p><h3 id="案例-2" tabindex="-1"><a class="header-anchor" href="#案例-2"><span>案例：</span></a></h3><p>经典反例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span> width <span class="token operator">=</span> w<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span> height <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
    <span class="token comment">// 正方形要求宽高相等</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        width <span class="token operator">=</span> w<span class="token punctuation">;</span>
        height <span class="token operator">=</span> w<span class="token punctuation">;</span> <span class="token comment">// 违反父类行为！</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题</strong>：正方形重写 <code>setWidth</code> 和 <code>setHeight</code>，导致父类行为被破坏。 <strong>改进</strong>：避免继承，或通过抽象类定义通用行为。</p><h3 id="应用-2" tabindex="-1"><a class="header-anchor" href="#应用-2"><span>应用：</span></a></h3><p>子类不重写父类的非抽象方法，例如正方形不应继承长方形（面积计算行为不同）</p><h3 id="设计模式体现-2" tabindex="-1"><a class="header-anchor" href="#设计模式体现-2"><span>设计模式体现：</span></a></h3><p>模板方法模式（子类实现步骤但不改变算法流程）</p><h2 id="接口隔离原则-isp" tabindex="-1"><a class="header-anchor" href="#接口隔离原则-isp"><span>接口隔离原则（ISP）：</span></a></h2><h3 id="核心思想-3" tabindex="-1"><a class="header-anchor" href="#核心思想-3"><span>核心思想：</span></a></h3><p>客户端不应依赖它不需要的接口，一个类对另一个类的依赖应该建立在最小的接口上。</p><h3 id="案例-3" tabindex="-1"><a class="header-anchor" href="#案例-3"><span>案例：</span></a></h3><p>一个臃肿的打印机接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Printer</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">BasicPrinter</span> <span class="token keyword">implements</span> <span class="token class-name">Printer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 不支持扫描</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 不支持传真</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题</strong>：基础打印机被迫实现不需要的方法。 <strong>改进</strong>：拆分接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Printer</span> <span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Scanner</span> <span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">FaxMachine</span> <span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">fax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">BasicPrinter</span> <span class="token keyword">implements</span> <span class="token class-name">Printer</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">AdvancedPrinter</span> <span class="token keyword">implements</span> <span class="token class-name">Printer</span><span class="token punctuation">,</span> <span class="token class-name">Scanner</span><span class="token punctuation">,</span> <span class="token class-name">FaxMachine</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用-3" tabindex="-1"><a class="header-anchor" href="#应用-3"><span>应用：</span></a></h3><p>拆分臃肿接口为多个小接口，例如打印机功能拆分为打印、扫描接口。</p><h3 id="设计模式体现-3" tabindex="-1"><a class="header-anchor" href="#设计模式体现-3"><span>设计模式体现：</span></a></h3><p>适配器模式（按需适配接口）</p><h2 id="依赖倒置原则-dip" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则-dip"><span>依赖倒置原则（DIP）：</span></a></h2><p>DIP：<strong>Dependency Inversion Principle</strong></p><h3 id="核心思想-4" tabindex="-1"><a class="header-anchor" href="#核心思想-4"><span>核心思想：</span></a></h3><p>高层模块不依赖底层模块，二者都应依赖抽象。</p><p>描述有点抽象：大致意思就是为了防止底层代码的替换导致高层代码的不可用。所以高层要依赖一个模板来进行操作，防止后续为了应对业务调整而对底层代码进行调整时，代码直接不可用了。</p><h3 id="案例-4" tabindex="-1"><a class="header-anchor" href="#案例-4"><span>案例：</span></a></h3><p>直接依赖具体数据库操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MySQLDatabase</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">MySQLDatabase</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySQLDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span> db<span class="token punctuation">.</span><span class="token function">saveData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题</strong>：切换数据库（如改为 PostgreSQL）需要修改 <code>App</code> 类。 <strong>改进</strong>：依赖抽象接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MySQLDatabase</span> <span class="token keyword">implements</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">PostgreSQLDatabase</span> <span class="token keyword">implements</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Database</span> db<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token class-name">Database</span> db<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>db <span class="token operator">=</span> db<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 依赖注入</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用-4" tabindex="-1"><a class="header-anchor" href="#应用-4"><span>应用：</span></a></h3><p>通过依赖注入（DI）解耦，例如数据库访问抽象接口而非具体实现。</p><h3 id="设计模式体现-4" tabindex="-1"><a class="header-anchor" href="#设计模式体现-4"><span>设计模式体现：</span></a></h3><p>依赖注入框架、观察者模式（主题与观察者通过抽象交互）。</p><h2 id="迪米特法则-law-of-demeter-最少知识原则" tabindex="-1"><a class="header-anchor" href="#迪米特法则-law-of-demeter-最少知识原则"><span>迪米特法则（Law of Demeter / 最少知识原则）：</span></a></h2><h3 id="核心思想-5" tabindex="-1"><a class="header-anchor" href="#核心思想-5"><span>核心思想：</span></a></h3><p>一个对象应尽可能少的与其他对象交互，降低耦合。</p><p>类似于：“我封臣的封臣不是我的封臣”，之于封臣进行联系，实现效果即可，其余的交给封臣处理</p><h3 id="案例-5" tabindex="-1"><a class="header-anchor" href="#案例-5"><span>案例：</span></a></h3><p>用户通过朋友类间接访问陌生人：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Friend</span> friend<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 直接访问陌生人的方法（违反迪米特法则）</span>
        <span class="token class-name">Stranger</span> stranger <span class="token operator">=</span> friend<span class="token punctuation">.</span><span class="token function">getStranger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stranger<span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>改进</strong>：通过朋友类代理请求：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Friend</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">askForHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Stranger</span> stranger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stranger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stranger<span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        friend<span class="token punctuation">.</span><span class="token function">askForHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不直接依赖 Stranger</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用-5" tabindex="-1"><a class="header-anchor" href="#应用-5"><span>应用：</span></a></h3><p>通过中介类协调交互，例如MVC中的控制器。</p><h3 id="设计模式体现-5" tabindex="-1"><a class="header-anchor" href="#设计模式体现-5"><span>设计模式体现：</span></a></h3><p>门面模式。（对外提供统一接口隐藏子系统细节）</p><h2 id="合成-聚合复用原则-carp" tabindex="-1"><a class="header-anchor" href="#合成-聚合复用原则-carp"><span>合成/聚合复用原则（CARP）：</span></a></h2><h3 id="核心思想-6" tabindex="-1"><a class="header-anchor" href="#核心思想-6"><span>核心思想：</span></a></h3><p>优先通过组合（对象间协作）而非继承复用代码。</p><h3 id="案例-6" tabindex="-1"><a class="header-anchor" href="#案例-6"><span>案例：</span></a></h3><p>游戏角色设计：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 继承方式（问题：多重继承导致复杂度）</span>
<span class="token keyword">class</span> <span class="token class-name">Dragon</span> <span class="token keyword">extends</span> <span class="token class-name">FlyingCreature</span><span class="token punctuation">,</span> <span class="token class-name">FireBreathingCreature</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token comment">// 组合方式（灵活扩展）</span>
<span class="token keyword">class</span> <span class="token class-name">Dragon</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">FlyBehavior</span> flyBehavior<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">AttackBehavior</span> attackBehavior<span class="token punctuation">;</span>
    <span class="token comment">// 通过注入不同行为实现功能</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用-6" tabindex="-1"><a class="header-anchor" href="#应用-6"><span>应用：</span></a></h3><p>避免继承层级过深，例如策略模式通过组合切换算法实现。</p><h3 id="设计模式体现-6" tabindex="-1"><a class="header-anchor" href="#设计模式体现-6"><span>设计模式体现：</span></a></h3><p>作为辅助手段应用于策略模式、装饰器模式等</p>`,87),c=[t];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","设计模式几大原则.html.vue"]]),r=JSON.parse('{"path":"/notes/designPatterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99.html","title":"设计模式七大原则","lang":"zh-CN","frontmatter":{"title":"设计模式七大原则","date":"2025-03-26T00:00:00.000Z","description":"单一职责原则（SRP）： SRP：Single Responsibility Principle 核心思想： 一个类（或模块）应该只有一种职责，仅有一个引起它变化的原因。 案例： 假设有一个 User 类，负责用户数据的管理和用户身份验证： 问题：数据管理和身份验证是两个独立的职责，修改数据库逻辑可能影响认证功能。【即违反了：仅有一个引起引起其变化的原...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/designPatterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"设计模式七大原则"}],["meta",{"property":"og:description","content":"单一职责原则（SRP）： SRP：Single Responsibility Principle 核心思想： 一个类（或模块）应该只有一种职责，仅有一个引起它变化的原因。 案例： 假设有一个 User 类，负责用户数据的管理和用户身份验证： 问题：数据管理和身份验证是两个独立的职责，修改数据库逻辑可能影响认证功能。【即违反了：仅有一个引起引起其变化的原..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-27T07:16:25.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2025-03-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-27T07:16:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式七大原则\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-27T07:16:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"单一职责原则（SRP）：","slug":"单一职责原则-srp","link":"#单一职责原则-srp","children":[{"level":3,"title":"核心思想：","slug":"核心思想","link":"#核心思想","children":[]},{"level":3,"title":"案例：","slug":"案例","link":"#案例","children":[]},{"level":3,"title":"应用：","slug":"应用","link":"#应用","children":[]},{"level":3,"title":"设计模式体现：","slug":"设计模式体现","link":"#设计模式体现","children":[]}]},{"level":2,"title":"开闭原则（OCP）：","slug":"开闭原则-ocp","link":"#开闭原则-ocp","children":[{"level":3,"title":"核心思想：","slug":"核心思想-1","link":"#核心思想-1","children":[]},{"level":3,"title":"案例：","slug":"案例-1","link":"#案例-1","children":[]},{"level":3,"title":"应用：","slug":"应用-1","link":"#应用-1","children":[]},{"level":3,"title":"设计模式体现：","slug":"设计模式体现-1","link":"#设计模式体现-1","children":[]}]},{"level":2,"title":"里氏替换原则（LSP）：","slug":"里氏替换原则-lsp","link":"#里氏替换原则-lsp","children":[{"level":3,"title":"核心思想：","slug":"核心思想-2","link":"#核心思想-2","children":[]},{"level":3,"title":"案例：","slug":"案例-2","link":"#案例-2","children":[]},{"level":3,"title":"应用：","slug":"应用-2","link":"#应用-2","children":[]},{"level":3,"title":"设计模式体现：","slug":"设计模式体现-2","link":"#设计模式体现-2","children":[]}]},{"level":2,"title":"接口隔离原则（ISP）：","slug":"接口隔离原则-isp","link":"#接口隔离原则-isp","children":[{"level":3,"title":"核心思想：","slug":"核心思想-3","link":"#核心思想-3","children":[]},{"level":3,"title":"案例：","slug":"案例-3","link":"#案例-3","children":[]},{"level":3,"title":"应用：","slug":"应用-3","link":"#应用-3","children":[]},{"level":3,"title":"设计模式体现：","slug":"设计模式体现-3","link":"#设计模式体现-3","children":[]}]},{"level":2,"title":"依赖倒置原则（DIP）：","slug":"依赖倒置原则-dip","link":"#依赖倒置原则-dip","children":[{"level":3,"title":"核心思想：","slug":"核心思想-4","link":"#核心思想-4","children":[]},{"level":3,"title":"案例：","slug":"案例-4","link":"#案例-4","children":[]},{"level":3,"title":"应用：","slug":"应用-4","link":"#应用-4","children":[]},{"level":3,"title":"设计模式体现：","slug":"设计模式体现-4","link":"#设计模式体现-4","children":[]}]},{"level":2,"title":"迪米特法则（Law of Demeter / 最少知识原则）：","slug":"迪米特法则-law-of-demeter-最少知识原则","link":"#迪米特法则-law-of-demeter-最少知识原则","children":[{"level":3,"title":"核心思想：","slug":"核心思想-5","link":"#核心思想-5","children":[]},{"level":3,"title":"案例：","slug":"案例-5","link":"#案例-5","children":[]},{"level":3,"title":"应用：","slug":"应用-5","link":"#应用-5","children":[]},{"level":3,"title":"设计模式体现：","slug":"设计模式体现-5","link":"#设计模式体现-5","children":[]}]},{"level":2,"title":"合成/聚合复用原则（CARP）：","slug":"合成-聚合复用原则-carp","link":"#合成-聚合复用原则-carp","children":[{"level":3,"title":"核心思想：","slug":"核心思想-6","link":"#核心思想-6","children":[]},{"level":3,"title":"案例：","slug":"案例-6","link":"#案例-6","children":[]},{"level":3,"title":"应用：","slug":"应用-6","link":"#应用-6","children":[]},{"level":3,"title":"设计模式体现：","slug":"设计模式体现-6","link":"#设计模式体现-6","children":[]}]}],"git":{"createdTime":1742975894000,"updatedTime":1743059785000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":2}]},"readingTime":{"minutes":4.9,"words":1470},"filePathRelative":"notes/designPatterns/设计模式几大原则.md","localizedDate":"2025年3月26日","excerpt":"<h2>单一职责原则（SRP）：</h2>\\n<p>SRP：<strong>Single Responsibility Principle</strong></p>\\n<h3>核心思想：</h3>\\n<p>一个类（或模块）应该只有一种职责，仅有一个引起它变化的原因。</p>\\n<h3>案例：</h3>\\n<p>假设有一个 <code>User</code> 类，负责用户数据的管理和用户身份验证：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">User</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 职责1：用户数据管理</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">saveUserToDatabase</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">User</span> user<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">User</span> <span class=\\"token function\\">loadUserFromDatabase</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> id<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 职责2：用户身份验证</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">authenticate</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> password<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,r as data};
