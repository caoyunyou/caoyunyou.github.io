import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Cl-fEmDX.js";const e={},p=t(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><p>正则表达式是一个强大的字符串处理工具，几乎所有的字符串操作都可以通过正则表达式来完成，其本质是一个特殊的字符序列，可以方便的检查一个字符串是否与我们定义的字符序列的某种模式相匹配。</p><p>正则表达式并不是 Python 所特有的，几乎所有编程语言都支持正则表达式，Python 提供了内置模块 <code>re</code> 和第三方模块 <code>regex</code> 来支持正则表达式，<code>regex</code> 模块提供了与 <code>re</code> 模块兼容的 API 接口，同时还提供了额外的功能和更全面的 Unicode 支持，本文只介绍 <code>re</code> 模块。</p><h2 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用"><span>2. 使用</span></a></h2><h3 id="_2-1-语法" tabindex="-1"><a class="header-anchor" href="#_2-1-语法"><span>2.1 语法</span></a></h3><p>我们先来熟悉一下正则表达式的基本语法。</p><table><thead><tr><th style="text-align:center;">字符</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>.</code></td><td style="text-align:left;">默认情况，匹配除了换行的任意字符；如果指定了标签 DOTALL，则匹配包括换行符的任意字符</td></tr><tr><td style="text-align:center;"><code>^</code></td><td style="text-align:left;">匹配字符串的开头，在 MULTILINE 模式也匹配换行后的首个符号</td></tr><tr><td style="text-align:center;"><code>$</code></td><td style="text-align:left;">匹配字符串尾或者换行符的前一个字符，在 MULTILINE 模式匹配换行符的前一个字符</td></tr><tr><td style="text-align:center;"><code>*</code></td><td style="text-align:left;">匹配前一个字符 0 到无限次</td></tr><tr><td style="text-align:center;"><code>+</code></td><td style="text-align:left;">匹配前一个字符 1 到无限次</td></tr><tr><td style="text-align:center;"><code>?</code></td><td style="text-align:left;">匹配前一个字符 0 次或 1 次</td></tr><tr><td style="text-align:center;"><code>{m}</code></td><td style="text-align:left;">匹配前一个字符 m 次</td></tr><tr><td style="text-align:center;"><code>{m, n}</code></td><td style="text-align:left;">匹配前一个字符 m 到 n 次</td></tr><tr><td style="text-align:center;"><code>*?</code> <code>+?</code> <code>??</code> <code>{m,n}?</code></td><td style="text-align:left;">使 *、+、？、{m,n} 变成非贪婪模式，也就是使这些匹配次数不定的表达式尽可能少的匹配</td></tr><tr><td style="text-align:center;"><code>\\</code></td><td style="text-align:left;">转义特殊字符</td></tr><tr><td style="text-align:center;"><code>[...]</code></td><td style="text-align:left;">用于表示一个字符集合</td></tr><tr><td style="text-align:center;">\`</td><td style="text-align:left;">\`</td></tr><tr><td style="text-align:center;"><code>(...)</code></td><td style="text-align:left;">将括起来的表达式分组，</td></tr><tr><td style="text-align:center;"><code>(?aiLmsux)</code></td><td style="text-align:left;">aiLmsux 每一个字符代表一个匹配模式，可选多个</td></tr><tr><td style="text-align:center;"><code>(?:…)</code></td><td style="text-align:left;">(...) 的不分组版本</td></tr><tr><td style="text-align:center;"><code>(?P&lt;name&gt;…)</code></td><td style="text-align:left;">分组，除了原有的编号外再指定一个额外的别名</td></tr><tr><td style="text-align:center;"><code>(?P=name)</code></td><td style="text-align:left;">引用别名为 name 的分组匹配到的字符串</td></tr><tr><td style="text-align:center;"><code>(?#…)</code></td><td style="text-align:left;"># 后面的将作为注释被忽略</td></tr><tr><td style="text-align:center;"><code>(?=…)</code></td><td style="text-align:left;">匹配 … 的内容，但是并不消费样式的内容</td></tr><tr><td style="text-align:center;"><code>(?!…)</code></td><td style="text-align:left;">匹配 … 不符合的情况</td></tr><tr><td style="text-align:center;"><code>(?&lt;=…)</code></td><td style="text-align:left;">匹配字符串的当前位置，它的前面匹配 … 的内容到当前位置</td></tr><tr><td style="text-align:center;"><code>(?&lt;!…)</code></td><td style="text-align:left;">匹配当前位置之前不是 ... 的样式</td></tr><tr><td style="text-align:center;">\`(?(id/name)yes-pattern</td><td style="text-align:left;">no-pattern)\`</td></tr><tr><td style="text-align:center;"><code>\\number</code></td><td style="text-align:left;">匹配数字代表的组合</td></tr><tr><td style="text-align:center;"><code>\\A</code></td><td style="text-align:left;">只匹配字符串开始</td></tr><tr><td style="text-align:center;"><code>\\b</code></td><td style="text-align:left;">匹配空字符串，但只在单词开始或结尾的位置</td></tr><tr><td style="text-align:center;"><code>\\B</code></td><td style="text-align:left;">匹配空字符串，但不能在词的开头或者结尾</td></tr><tr><td style="text-align:center;"><code>\\d</code></td><td style="text-align:left;">主要匹配数字 [0-9]</td></tr><tr><td style="text-align:center;"><code>\\D</code></td><td style="text-align:left;">匹配任何非十进制数字的字符</td></tr><tr><td style="text-align:center;"><code>\\s</code></td><td style="text-align:left;">匹配空白字符，主要包括：空格 \\t \\n \\r \\f \\v</td></tr><tr><td style="text-align:center;"><code>\\S</code></td><td style="text-align:left;">匹配任何非空白字符</td></tr><tr><td style="text-align:center;"><code>\\w</code></td><td style="text-align:left;">匹配 [a-zA-Z0-9_]</td></tr><tr><td style="text-align:center;"><code>\\W</code></td><td style="text-align:left;">匹配非单词字符</td></tr><tr><td style="text-align:center;"><code>\\Z</code></td><td style="text-align:left;">只匹配字符串尾</td></tr></tbody></table><h3 id="_2-2-re-模块" tabindex="-1"><a class="header-anchor" href="#_2-2-re-模块"><span>2.2 re 模块</span></a></h3><h4 id="_2-2-1-模块内容" tabindex="-1"><a class="header-anchor" href="#_2-2-1-模块内容"><span>2.2.1 模块内容</span></a></h4><p>re 模块几乎包含了正则表达式的所有功能，我们先来看一下该模块的主要方法。</p><p><strong>re.compile(pattern, flags=0)</strong></p><p>用于编译正则表达式，生成一个正则表达式（Pattern）对象，供 match() 和 search() 这两个函数使用。参数说明如下：</p><ul><li>pattern : 一个字符串形式的正则表达式</li><li>flags : 匹配模式，包括如下：</li></ul><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>re.A</code></td><td style="text-align:left;">让 \\w, \\W, \\b, \\B, \\d, \\D, \\s, \\S 只匹配 ASCII</td></tr><tr><td style="text-align:center;"><code>re.I</code></td><td style="text-align:left;">忽略大小写</td></tr><tr><td style="text-align:center;"><code>re.M</code></td><td style="text-align:left;">多行模式</td></tr><tr><td style="text-align:center;"><code>re.L</code></td><td style="text-align:left;">由当前语言区域决定 \\w, \\W, \\b, \\B 和大小写敏感匹配</td></tr><tr><td style="text-align:center;"><code>re.S</code></td><td style="text-align:left;">. 匹配包括换行符在内的任意字符</td></tr><tr><td style="text-align:center;"><code>re.U</code></td><td style="text-align:left;">在 Python3 中是冗余的，因为 Python3 中字符串已经默认为 Unicode</td></tr><tr><td style="text-align:center;"><code>re.X</code></td><td style="text-align:left;">忽略空格和 # 后面的注释</td></tr></tbody></table><p>看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;abc&#39;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>re.search(pattern, string, flags=0)</strong></p><p>扫描整个字符串找到匹配样式的第一个位置，并返回一个相应的匹配对象；如果没有匹配，就返回一个 None。参数说明如下：</p><ul><li>pattern：匹配的正则表达式</li><li>string：要匹配的字符串</li><li>flags：匹配模式</li></ul><p>看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abcef&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;aBcef&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>re.match(pattern, string, flags=0)</strong></p><p>如果 string 开始的 0 或者多个字符匹配到了正则表达式样式，就返回一个相应的匹配对象；如果没有匹配，就返回 None。看下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span><span class="token string">r&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abcef&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span><span class="token string">r&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>re.split(pattern, string, maxsplit=0, flags=0)</strong></p><p>用 pattern 分开 string，如果在 pattern 中捕获到括号，那么所有的组里的文字也会包含在列表里，如果 maxsplit 非零，最多进行 maxsplit 次分隔，剩下的字符全部返回到列表的最后一个元素。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> re

    <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r&#39;\\w+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ityard, ityard, ityard.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r&#39;(\\W+)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ityard, ityard, ityard.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r&#39;\\W+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ityard, ityard, ityard.&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;[a-f]+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1A2b3&#39;</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>re.findall(pattern, string, flags=0)</strong></p><p>对 string 返回一个不重复的 pattern 的匹配列表，string 从左到右进行扫描，匹配按找到的顺序返回，如果样式里存在一到多个组，就返回一个组合列表，空匹配也会包含在结果里。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> re

    <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&#39;ab&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abefabdeab&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>re.finditer(pattern, string, flags=0)</strong></p><p>pattern 在 string 里所有的非重复匹配，返回为一个迭代器 iterator 保存了匹配对象，string 从左到右扫描，匹配按顺序排列。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

it <span class="token operator">=</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">r&#39;\\d+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;12ab34cd56&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> it<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>re.sub(pattern, repl, string, count=0, flags=0)</strong></p><p>返回通过使用 repl 替换在 string 最左边非重叠出现的 pattern 而获得的字符串，count 表示匹配后替换的最大次数，默认 0 表示替换所有的匹配。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;ityard # 是我的名字&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;#.*$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>re.subn(pattern, repl, string, count=0, flags=0)</strong></p><p>行为与 re.sub() 相同，但返回的是一个元组。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;ityard # 是我的名字&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>subn<span class="token punctuation">(</span><span class="token string">r&#39;#.*$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>re.escape(pattern)</strong></p><p>转义 pattern 中的特殊字符。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>escape<span class="token punctuation">(</span><span class="token string">&#39;https://blog.csdn.net/ityard&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>re.purge()</strong></p><p>清除正则表达式缓存。</p><h4 id="_2-2-2-正则对象" tabindex="-1"><a class="header-anchor" href="#_2-2-2-正则对象"><span>2.2.2 正则对象</span></a></h4><p>来看一下正则表达式对象的相应方法。</p><p><strong>Pattern.search(string[, pos[, endpos]])</strong></p><p>扫描整个 string 寻找第一个匹配的位置，并返回一个相应的匹配对象，如果没有匹配，就返回 None；可选参数 pos 给出了字符串中开始搜索的位置索引，默认为 0；可选参数 endpos 限定了字符串搜索的结束。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;bc&#39;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;aBcdef&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;aBcdef&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Pattern.match(string[, pos[, endpos]])</strong></p><p>如果 string 的开始位置能够找到这个正则样式的任意个匹配，就返回一个相应的匹配对象，如果不匹配，就返回 None。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;bc&#39;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;aBcdef&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;aBcdef&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Pattern.fullmatch(string[, pos[, endpos]])</strong></p><p>如果整个 string 匹配这个正则表达式，就返回一个相应的匹配对象，否则就返回 None。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;bc&#39;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span><span class="token string">&#39;Bc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span><span class="token string">&#39;aBcdef&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Pattern.split(string, maxsplit=0)</strong></p><p>等价于 re.split() 函数，使用了编译后的样式。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;bc&#39;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;abc, aBcd, abcde.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Pattern.findall(string[, pos[, endpos]])</strong></p><p>使用了编译后样式，可以接收可选参数 pos 和 endpos，限制搜索范围。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;bc&#39;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;abcefabCdeABC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;abcefabCdeABC&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Pattern.finditer(string[, pos[, endpos]])</strong></p><p>使用了编译后样式，可以接收可选参数 pos 和 endpos ，限制搜索范围。看一下示例：</p><div class="language-pyt line-numbers-mode" data-ext="pyt" data-title="pyt"><pre class="language-pyt"><code>import re

pattern = re.compile(r&#39;bc&#39;, re.I)
it = pattern.finditer(&#39;12bc34BC56&#39;, 0, 6)
for match in it:
    print(match)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Pattern.sub(repl, string, count=0)</strong></p><p>使用了编译后的样式。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;#.*$&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;ityard # 是我的名字&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Pattern.subn(repl, string, count=0)</strong></p><p>使用了编译后的样式。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;#.*$&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;ityard # 是我的名字&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>subn<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-匹配对象" tabindex="-1"><a class="header-anchor" href="#_2-2-3-匹配对象"><span>2.2.3 匹配对象</span></a></h4><p>最后看一匹配对象的相应方法。</p><p><strong>Match.expand(template)</strong></p><p>对 template 进行反斜杠转义替换并且返回。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;(?P&lt;year&gt;\\w+) (?P&lt;month&gt;\\w+)&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2020 01&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>expand<span class="token punctuation">(</span><span class="token string">r&#39;现在是 \\1 年 \\2 月&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Match.group([group1, ...])</strong></p><p>返回一个或者多个匹配的子组。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;(?P&lt;year&gt;\\w+) (?P&lt;month&gt;\\w+)&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2020 01&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Match.groups(default=None)</strong></p><p>返回一个元组，包含所有匹配的子组，在样式中出现的从 1 到任意多的组合，default 参数用于不参与匹配的情况，默认为 None。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;(?P&lt;year&gt;\\w+) (?P&lt;month&gt;\\w+)&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2020 01&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Match.groupdict(default=None)</strong></p><p>返回一个字典，包含了所有的命名子组，default 参数用于不参与匹配的组合，默认为 None。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;(?P&lt;year&gt;\\w+) (?P&lt;month&gt;\\w+)&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2020 01&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>groupdict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Match.start([group])</strong> 和 <strong>Match.end([group])</strong></p><p>返回 group 匹配到的字串的开始和结束标号。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;(?P&lt;year&gt;\\w+) (?P&lt;month&gt;\\w+)&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2020 01&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Match.span([group])</strong></p><p>对于一个匹配 m，返回一个二元组 (m.start(group), m.end(group))。看一下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;(?P&lt;year&gt;\\w+) (?P&lt;month&gt;\\w+)&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2020 01&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,90),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","Python 基础(22)正则表达式.html.vue"]]),k=JSON.parse('{"path":"/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(22)%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"Python 基础(22)正则表达式","lang":"zh-CN","frontmatter":{"title":"Python 基础(22)正则表达式","date":"2024-05-15T00:00:00.000Z","description":"1. 简介 正则表达式是一个强大的字符串处理工具，几乎所有的字符串操作都可以通过正则表达式来完成，其本质是一个特殊的字符序列，可以方便的检查一个字符串是否与我们定义的字符序列的某种模式相匹配。 正则表达式并不是 Python 所特有的，几乎所有编程语言都支持正则表达式，Python 提供了内置模块 re 和第三方模块 regex 来支持正则表达式，re...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(22)%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Python 基础(22)正则表达式"}],["meta",{"property":"og:description","content":"1. 简介 正则表达式是一个强大的字符串处理工具，几乎所有的字符串操作都可以通过正则表达式来完成，其本质是一个特殊的字符序列，可以方便的检查一个字符串是否与我们定义的字符序列的某种模式相匹配。 正则表达式并不是 Python 所特有的，几乎所有编程语言都支持正则表达式，Python 提供了内置模块 re 和第三方模块 regex 来支持正则表达式，re..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T14:40:49.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-05-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-16T14:40:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 基础(22)正则表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-16T14:40:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2. 使用","slug":"_2-使用","link":"#_2-使用","children":[{"level":3,"title":"2.1 语法","slug":"_2-1-语法","link":"#_2-1-语法","children":[]},{"level":3,"title":"2.2 re 模块","slug":"_2-2-re-模块","link":"#_2-2-re-模块","children":[]}]}],"git":{"createdTime":1715787719000,"updatedTime":1715870449000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":2}]},"readingTime":{"minutes":7.84,"words":2352},"filePathRelative":"notes/python/基础/Python 基础(22)正则表达式.md","localizedDate":"2024年5月15日","excerpt":"<h2>1. 简介</h2>\\n<p>正则表达式是一个强大的字符串处理工具，几乎所有的字符串操作都可以通过正则表达式来完成，其本质是一个特殊的字符序列，可以方便的检查一个字符串是否与我们定义的字符序列的某种模式相匹配。</p>\\n<p>正则表达式并不是 Python 所特有的，几乎所有编程语言都支持正则表达式，Python 提供了内置模块 <code>re</code> 和第三方模块 <code>regex</code> 来支持正则表达式，<code>regex</code> 模块提供了与 <code>re</code> 模块兼容的 API 接口，同时还提供了额外的功能和更全面的 Unicode 支持，本文只介绍 <code>re</code> 模块。</p>","autoDesc":true}');export{u as comp,k as data};
