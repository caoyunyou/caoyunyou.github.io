import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as i,c as l,e as t}from"./app-Dv3cEzSJ.js";const a={},n=t('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介：</span></a></h2><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点：</span></a></h3><p>自我总结：</p><p>优点：</p><ul><li>快，</li><li>猛，</li><li>线程安全【暂时没想到】</li></ul><p>缺点：</p><ul><li>没想到有什么缺点</li></ul><p>大佬总结：</p><p>优点：</p><ul><li>快，基于内存操作。</li><li>单线程，操作线程安全。其中的单线程是因为多路复用IO模型的关系，对于多个连接处理是单线程+事件驱动。具体处理并不是单线程的。</li><li>支持持久化</li></ul><p>缺点：【说实话，没感觉有什么】</p><ul><li>对join或其他结构化查询的支持就比较差。【但是这个本来就是k-v形式的，好像这也不叫问题】</li></ul><h3 id="io多路复用" tabindex="-1"><a class="header-anchor" href="#io多路复用"><span>io多路复用</span></a></h3><p>自我总结：</p><p>redis的IO多路复用的模式就像是事件驱动模式一样。有一个线程进行多端连接和命令处理，触发事件并激活或者交给对应的线程进行处理</p><p>大佬总结：</p><p>将用户socket对应的文件描述符（file description）注册进epoll，然后epoll帮你监听哪些socket上有消息到达。当某个socket可读或者可写的时候，它可以给你一个通知。只有当系统通知哪个描述符可读了，才去执行read操作，可以保证每次read都能读到有效数据。这样，多个描述符的I/O操作都能在一个线程内并发交替地顺序完成，这就叫I/O多路复用，这里的复用指的是复用同一个线程。</p><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景：</span></a></h3><p>自我总结：</p><ul><li>用作缓存</li></ul><p>大佬总结：</p><ul><li>缓存热点数据</li><li>计数操作，浏览量、点赞量等</li><li>简单消息队列，利用Redis自身的发布/订阅模式实现简单消息队列【后面可以玩一玩，异步处理还是很好的，做一些异步的更新操作】</li><li>好友关系，利用集合的一些命令、比如求交集、并集、差集等。方便搞定一些共同好友、共同爱好之类的功能</li><li>限速器，超点处理、限流处理等。</li></ul><h3 id="memcached和redis的区别" tabindex="-1"><a class="header-anchor" href="#memcached和redis的区别"><span>Memcached和Redis的区别</span></a></h3><p>自我总结：</p><p>我擦了，我知道个鸡毛啊？</p><p>我连Memcached都没用过</p><p>大佬总结：</p><ul><li>Redis只使用单核，而Memcached可以使用多核。</li><li>Memcached数据类型单一</li><li>Memcached不支持持久化</li></ul><h2 id="redis数据类型" tabindex="-1"><a class="header-anchor" href="#redis数据类型"><span>Redis数据类型：</span></a></h2><p>这部分暂时省略，后面再补充吧，先大致看看 2024-04-16 23:58:00</p>',30),p=[n];function d(o,r){return i(),l("div",null,p)}const h=e(a,[["render",d],["__file","Redis基础.html.vue"]]),m=JSON.parse('{"path":"/notes/middleware/Redis/Redis%E5%9F%BA%E7%A1%80.html","title":"Redis基础","lang":"zh-CN","frontmatter":{"title":"Redis基础","date":"2024-04-15T00:00:00.000Z","description":"简介： 优缺点： 自我总结： 优点： 快， 猛， 线程安全【暂时没想到】 缺点： 没想到有什么缺点 大佬总结： 优点： 快，基于内存操作。 单线程，操作线程安全。其中的单线程是因为多路复用IO模型的关系，对于多个连接处理是单线程+事件驱动。具体处理并不是单线程的。 支持持久化 缺点：【说实话，没感觉有什么】 对join或其他结构化查询的支持就比较差。【...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/middleware/Redis/Redis%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Redis基础"}],["meta",{"property":"og:description","content":"简介： 优缺点： 自我总结： 优点： 快， 猛， 线程安全【暂时没想到】 缺点： 没想到有什么缺点 大佬总结： 优点： 快，基于内存操作。 单线程，操作线程安全。其中的单线程是因为多路复用IO模型的关系，对于多个连接处理是单线程+事件驱动。具体处理并不是单线程的。 支持持久化 缺点：【说实话，没感觉有什么】 对join或其他结构化查询的支持就比较差。【..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T14:40:49.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-04-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-16T14:40:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-16T14:40:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"简介：","slug":"简介","link":"#简介","children":[{"level":3,"title":"优缺点：","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"io多路复用","slug":"io多路复用","link":"#io多路复用","children":[]},{"level":3,"title":"应用场景：","slug":"应用场景","link":"#应用场景","children":[]},{"level":3,"title":"Memcached和Redis的区别","slug":"memcached和redis的区别","link":"#memcached和redis的区别","children":[]}]},{"level":2,"title":"Redis数据类型：","slug":"redis数据类型","link":"#redis数据类型","children":[]}],"git":{"createdTime":1715776912000,"updatedTime":1715870449000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":2}]},"readingTime":{"minutes":2.01,"words":604},"filePathRelative":"notes/middleware/Redis/Redis基础.md","localizedDate":"2024年4月15日","excerpt":"<h2>简介：</h2>\\n<h3>优缺点：</h3>\\n<p>自我总结：</p>\\n<p>优点：</p>\\n<ul>\\n<li>快，</li>\\n<li>猛，</li>\\n<li>线程安全【暂时没想到】</li>\\n</ul>\\n<p>缺点：</p>\\n<ul>\\n<li>没想到有什么缺点</li>\\n</ul>\\n<p>大佬总结：</p>\\n<p>优点：</p>\\n<ul>\\n<li>快，基于内存操作。</li>\\n<li>单线程，操作线程安全。其中的单线程是因为多路复用IO模型的关系，对于多个连接处理是单线程+事件驱动。具体处理并不是单线程的。</li>\\n<li>支持持久化</li>\\n</ul>\\n<p>缺点：【说实话，没感觉有什么】</p>","autoDesc":true}');export{h as comp,m as data};
