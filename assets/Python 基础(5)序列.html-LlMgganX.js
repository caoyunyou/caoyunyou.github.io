import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-fe-qs-fC.js";const e="/assets/640-B2g-2PEO.jpg",p="/assets/641-BApgD7O1.jpg",o={},l=t('<h2 id="_1-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-基本使用"><span>1.基本使用</span></a></h2><h3 id="_1-1-索引" tabindex="-1"><a class="header-anchor" href="#_1-1-索引"><span>1.1 索引</span></a></h3><p>序列索引支持非负数和负数，索引为非负数，从 <code>0</code> 开始，如下所示：</p><figure><img src="'+e+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>索引为负数由右向左计数，从 <code>-1</code> 开始，如图所示：</p><figure><img src="'+p+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>下面通过一个示例作进一步了解，以字符串为例。</p><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;Python&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;str[0] str[-6] =&#39;</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;str[5] str[-1] =&#39;</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token builtin">str</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span>PP
<span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token builtin">str</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span>nn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果看，我们使用费负数索引与复数索引得到的结果一致</p><h3 id="_1-2-切片" tabindex="-1"><a class="header-anchor" href="#_1-2-切片"><span>1.2 切片</span></a></h3><p>切片操作可以访问一定范围内的元素，语法如下所示：</p><p><code>sname[start : end : step]</code></p><ul><li>sname：表示序列的名称</li><li>start：开始索引位置（包括该位置），默认为0</li><li>end：表示切片的结束索引位置（不包括该位置），默认为序列的长度</li><li>step：步长</li></ul><p>以字符串为例</p><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;Python&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>Pyt
hon
Python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-相加" tabindex="-1"><a class="header-anchor" href="#_1-3-相加"><span>1.3 相加</span></a></h3><p>Python 支持类型相同的序列使用 <code>+</code> 作相加操作，该操作不会去除重复的元素。以字符串为例。</p><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;Python&#39;</span>
s2 <span class="token operator">=</span> <span class="token string">&#39;Python&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;s1 + s2 --&gt; &#39;</span><span class="token punctuation">,</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>s1 <span class="token operator">+</span> s2 <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> PythonPython
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-4-相乘" tabindex="-1"><a class="header-anchor" href="#_1-4-相乘"><span>1.4 相乘</span></a></h3><p>Python 中，使用数字 n 乘以一个序列会生成新的序列，内容为原来序列被重复 n 次的结果。以字符串为例</p><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;Python&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;2 * str --&gt;&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">str</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token number">2</span> <span class="token operator">*</span> <span class="token builtin">str</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span>PythonPython
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-5-元素是否存在序列中" tabindex="-1"><a class="header-anchor" href="#_1-5-元素是否存在序列中"><span>1.5 元素是否存在序列中</span></a></h3><p>Python 使用 <code>in</code> 关键字检查某元素是否为序列的成员。语法如下：</p><p><code>val in seq</code></p><ul><li>val：要检查的元素</li><li>seq：指定的序列</li></ul><p>通过一个例子做进一步了解，以特殊字符为例</p><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;Python&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-6-内置函数" tabindex="-1"><a class="header-anchor" href="#_1-6-内置函数"><span>1.6 内置函数</span></a></h3><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">len()</td><td style="text-align:left;">计算序列的长度</td></tr><tr><td style="text-align:left;">max()</td><td style="text-align:left;">找出序列中的最大元素</td></tr><tr><td style="text-align:left;">min()</td><td style="text-align:left;">找出序列中的最小元素</td></tr><tr><td style="text-align:left;">list()</td><td style="text-align:left;">将序列转换为列表</td></tr><tr><td style="text-align:left;">str()</td><td style="text-align:left;">将序列转换为字符串</td></tr><tr><td style="text-align:left;">sum()</td><td style="text-align:left;">计算元素的和</td></tr><tr><td style="text-align:left;">sorted()</td><td style="text-align:left;">对元素进行排序</td></tr><tr><td style="text-align:left;">enumerate()</td><td style="text-align:left;">将序列组合为一个索引序列，多用在 for 循环中</td></tr></tbody></table><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;dbcae&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;len --&gt;&#39;</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;max --&gt;&#39;</span><span class="token punctuation">,</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;sorted --&gt;&#39;</span><span class="token punctuation">,</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">len</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">5</span>
<span class="token builtin">max</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span>e
<span class="token builtin">sorted</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48),i=[l];function c(r,u){return s(),a("div",null,i)}const g=n(o,[["render",c],["__file","Python 基础(5)序列.html.vue"]]),h=JSON.parse(`{"path":"/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(5)%E5%BA%8F%E5%88%97.html","title":"Python 基础(5)序列","lang":"zh-CN","frontmatter":{"title":"Python 基础(5)序列","date":"2024-05-11T00:00:00.000Z","description":"1.基本使用 1.1 索引 序列索引支持非负数和负数，索引为非负数，从 0 开始，如下所示： 图片图片 索引为负数由右向左计数，从 -1 开始，如图所示： 图片图片 下面通过一个示例作进一步了解，以字符串为例。 案例： 输出结果： 从结果看，我们使用费负数索引与复数索引得到的结果一致 1.2 切片 切片操作可以访问一定范围内的元素，语法如下所示： sn...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(5)%E5%BA%8F%E5%88%97.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Python 基础(5)序列"}],["meta",{"property":"og:description","content":"1.基本使用 1.1 索引 序列索引支持非负数和负数，索引为非负数，从 0 开始，如下所示： 图片图片 索引为负数由右向左计数，从 -1 开始，如图所示： 图片图片 下面通过一个示例作进一步了解，以字符串为例。 案例： 输出结果： 从结果看，我们使用费负数索引与复数索引得到的结果一致 1.2 切片 切片操作可以访问一定范围内的元素，语法如下所示： sn..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T14:40:49.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-05-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-16T14:40:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 基础(5)序列\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-16T14:40:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.基本使用","slug":"_1-基本使用","link":"#_1-基本使用","children":[{"level":3,"title":"1.1 索引","slug":"_1-1-索引","link":"#_1-1-索引","children":[]},{"level":3,"title":"1.2 切片","slug":"_1-2-切片","link":"#_1-2-切片","children":[]},{"level":3,"title":"1.3 相加","slug":"_1-3-相加","link":"#_1-3-相加","children":[]},{"level":3,"title":"1.4 相乘","slug":"_1-4-相乘","link":"#_1-4-相乘","children":[]},{"level":3,"title":"1.5 元素是否存在序列中","slug":"_1-5-元素是否存在序列中","link":"#_1-5-元素是否存在序列中","children":[]},{"level":3,"title":"1.6 内置函数","slug":"_1-6-内置函数","link":"#_1-6-内置函数","children":[]}]}],"git":{"createdTime":1715776912000,"updatedTime":1715870449000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":2}]},"readingTime":{"minutes":1.98,"words":595},"filePathRelative":"notes/python/基础/Python 基础(5)序列.md","localizedDate":"2024年5月11日","excerpt":"<h2>1.基本使用</h2>\\n<h3>1.1 索引</h3>\\n<p>序列索引支持非负数和负数，索引为非负数，从 <code>0</code> 开始，如下所示：</p>\\n<figure><figcaption>图片</figcaption></figure>\\n<p>索引为负数由右向左计数，从 <code>-1</code> 开始，如图所示：</p>\\n<figure><figcaption>图片</figcaption></figure>\\n<p>下面通过一个示例作进一步了解，以字符串为例。</p>\\n<p>案例：</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token builtin\\">str</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'Python'</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'str[0] str[-6] ='</span><span class=\\"token punctuation\\">,</span><span class=\\"token builtin\\">str</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span><span class=\\"token builtin\\">str</span><span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'str[5] str[-1] ='</span><span class=\\"token punctuation\\">,</span><span class=\\"token builtin\\">str</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span><span class=\\"token builtin\\">str</span><span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{g as comp,h as data};
