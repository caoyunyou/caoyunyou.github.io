import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Dv3cEzSJ.js";const e={},p=t(`<h2 id="_1-相关概念" tabindex="-1"><a class="header-anchor" href="#_1-相关概念"><span>1.相关概念</span></a></h2><h3 id="_1-1-解释器【虚拟机】" tabindex="-1"><a class="header-anchor" href="#_1-1-解释器【虚拟机】"><span>1.1 解释器【虚拟机】</span></a></h3><p>作为一种脚本语言，与Jscript一样，Python运行也是解释执行，所以也就需要对应的虚拟机来作为解释执行器。</p><p>Python解释执行器的工作流程就是将<code>.py</code>文件的代码通过虚拟机解释执行。比较常见的解释器【虚拟机】包括如下几种：</p><ul><li><strong>CPython</strong>：官方解释器，我们从官网下载安装后获得的就是这个解释器，它使用 C 语言开发，是使用范围最广泛的 Python 解释器。</li><li><strong>Jython</strong>：由 Java 编写，它可以将 Python 代码编译成 Java 字节码，再由 JVM 执行对应的字节码。</li><li><strong>IronPython</strong>：与 Jython 类似，它由 C# 编写，是运行在 .Net 平台上的解释器。</li><li><strong>IPython</strong>：基于 CPython 的一个交互式解释器，它主要增强了 CPython 的交互方式。</li><li><strong>PyPy</strong>：采用了 JIT 技术，它是一个关注执行速度的 Python 解释器，该解释器可以明显提升 Python 代码的执行速度。</li></ul><h3 id="_1-2-gil" tabindex="-1"><a class="header-anchor" href="#_1-2-gil"><span>1.2 GIL</span></a></h3><p>GIL 全称 global interpreter lock，中文译为全局解释器锁，CPython 解释器就是通过 GIL 机制来确保同一时刻只有一个线程执行 Python 代码的，这样做十分方便的帮助 CPython 解决了并发访问的线程安全问题，但却牺牲了在多处理器上的并行性，所以 CPython 解释器下的多线程并不是真正意义上的多线程。</p><p>我们可能会有一个疑问：既然 CPython 解释器使用 GIL 机制牺牲了多线程的并行性，那么把 GIL 去掉换用其他方式实现不行吗？在说这个问题之前，我们先简单了解一下基本情况：最初因 GIL 可以简单、快捷的解决多线程并发访问的安全问题选择了这种机制，随后又有大量的代码库开发者开始依赖这种特性，随之时间的推移，人们开始意识到了并行性的问题，但这时已经到了尾大不掉的程度了，所以现实情况是：尽管可以去掉 GIL，但工程量太大了。</p><h2 id="_2-threading" tabindex="-1"><a class="header-anchor" href="#_2-threading"><span>2.threading</span></a></h2><p>Python（CPython） 提供了<code>_thread</code>和<code>threading</code>两个线程模块，<code>_thread</code>是低级模块，<code>threading</code>对<code>_thread</code>进行了封装，提高了<code>_thread</code>原有功能的易用性以及扩展了新功能，通常我们只需要使用<code>threading</code>模块就可以了。</p><h3 id="_2-1-方法属性" tabindex="-1"><a class="header-anchor" href="#_2-1-方法属性"><span>2.1 方法属性</span></a></h3><p>首先，我们来看一下 <code>threading</code> 模块的直接方法和属性。</p><p><strong>threading.enumerate()</strong></p><p>以列表形式返回当前所有存活的 threading.Thread 对象。</p><p><strong>threading.active_count()</strong></p><p>返回当前存活的 threading.Thread 对象，等于 len(threading.enumerate())。</p><p><strong>threading.current_thread()</strong></p><p>返回当前对应调用者控制的 threading.Thread 对象，如果调用者的控制线程不是利用 threading 创建，则会返回一个功能受限的虚拟线程对象。</p><p><strong>threading.get_ident()</strong></p><p>返回当前线程的线程标识符，它是一个非零的整数，其值没有直接含义，它可能会在线程退出，新线程创建时被复用。</p><p><strong>threading.main_thread()</strong></p><p>返回主线程对象，一般情况下，主线程是 Python 解释器开始时创建的线程。</p><p><strong>threading.stack_size([size])</strong></p><p>返回创建线程时用的堆栈大小，可选参数 size 指定之后新建线程的堆栈大小，size 值需要为 0 或者最小是 32768（32KiB）的一个正整数，如不指定 size，则默认为 0。</p><p><strong>threading.get_native_id()</strong></p><p>返回内核分配给当前线程的原生集成线程 ID，其值是一个非负整数。</p><p><strong>threading.TIMEOUT_MAX</strong></p><p>指定阻塞函数（如：Lock.acquire()， Condition.wait() ...）中形参 timeout 允许的最大值，传入超过这个值的 timeout 会抛出 OverflowError 异常。</p><h3 id="_2-2-线程对象" tabindex="-1"><a class="header-anchor" href="#_2-2-线程对象"><span>2.2 线程对象</span></a></h3><p>先了解一下 Python 守护线程基本概念。</p><ul><li><strong>守护线程</strong>：当一个线程被标记为守护线程时，Python 程序会在剩下的线程都是守护线程时退出，即等待所有非守护线程运行完毕；守护线程在程序关闭时会突然关闭，可能会导致资源不能被正确释放的的问题，如：已经打开的文档等。</li><li><strong>非守护线程</strong>：通常我们创建的线程默认就是非守护线程，Python 程序退出时，如果还有非守护线程在运行，程序会等待所有非守护线程运行完毕才会退出。</li></ul><p><strong>threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)</strong></p><p>创建线程对象，参数说明如下所示。</p><ul><li>group：通常默认即可，作为日后扩展 ThreadGroup 类实现而保留。</li><li>target：用于 run() 方法调用的可调用对象，默认为 None。</li><li>name：线程名称，默认是 Thread-N 格式构成的唯一名称，其中 N 是十进制数。</li><li>args：用于调用目标函数的参数元组，默认为 ()。</li><li>kwargs：用于调用目标函数的关键字参数字典，默认为 {}。</li><li>daemon：设置线程是否为守护模式，默认为 None。</li></ul><p>看一下线程对象 threading.Thread 的方法和属性。</p><ul><li><strong>start()</strong>：启动线程。</li><li><strong>run()</strong>：线程执行具体功能的方法。</li><li><strong>join(timeout=None)</strong>：当 timeout 为 None 时，会等待至线程结束；当 timeout 不为 None 时，会等待至 timeout 时间结束，单位为秒。</li><li><strong>is_alive()</strong>：判断线程是否存活。</li><li><strong>getName()</strong>：返回线程名。</li><li><strong>setName()</strong>：设置线程名。</li><li><strong>isDaemon()</strong>：判断线程是否为守护线程。</li><li><strong>setDaemon()</strong>：设置线程是否为守护线程。</li><li><strong>name</strong>：线程名。</li><li><strong>ident</strong>：线程标识符。</li><li><strong>daemon</strong>：线程是否为守护线程。</li></ul><p>我们可以通过实例化 threading.Thread 来创建线程，也可以使用继承 threading.Thread 的子类来创建。</p><p><strong>实例化 threading.Thread</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time


<span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span>sleep<span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>sleep<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;当前线程为：&#39;</span><span class="token punctuation">,</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sleep&#39;</span><span class="token punctuation">,</span> sleep<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;T1&#39;</span><span class="token punctuation">,</span> target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;T2&#39;</span><span class="token punctuation">,</span> target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;主线程结束&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>继承 threading.Thread</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time


<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sleep<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>sleep <span class="token operator">=</span> sleep
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sleep<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;name：&#39;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    t1 <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;T1&#39;</span><span class="token punctuation">)</span>
    t2 <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;T2&#39;</span><span class="token punctuation">)</span>
    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-锁对象" tabindex="-1"><a class="header-anchor" href="#_2-3-锁对象"><span>2.3 锁对象</span></a></h3><p>同一变量在多线之间是共享的，任何一个变量都可以被所有线程修改，当多个线程一起修改同一变量时，很可能互相冲突得不到正确的结果，造成线程安全问题。通过示例看一下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time

a <span class="token operator">=</span> <span class="token number">5</span>


<span class="token keyword">def</span> <span class="token function">oper</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> a
    a <span class="token operator">=</span> a <span class="token operator">-</span> b
    a <span class="token operator">=</span> a <span class="token operator">+</span> b


<span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        oper<span class="token punctuation">(</span>b<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    m <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">while</span> m <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;T1&#39;</span><span class="token punctuation">)</span>
        t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;T2&#39;</span><span class="token punctuation">)</span>
        t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
        t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        m <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：【注意不一定会出现，只是可能出现，可以尝试使用多个线程循环处理】</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token number">5</span>
<span class="token number">5</span>
<span class="token number">5</span>
<span class="token number">6</span>
<span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常情况下，oper(b) 操作会使 a 的值保持不变，但从多线程的执行结果来看，我们发现出现了错误的结果，并且每次执行的结果可能不同，通常这种问题我们可以使用加锁的方式解决。</p><p><strong>threading.Lock</strong></p><p>实现原始锁对象的类，一旦一个线程获得一个锁，会阻塞随后尝试获得锁的线程，直到它被释放，通常称其为互斥锁，它是由 _thread 模块直接扩展实现的。它具有如下方法：</p><ul><li>acquire(blocking=True, timeout=-1)：可以阻塞或非阻塞地获得锁，参数 blocking 用来设置是否阻塞，timeout 用来设置阻塞时间，当 blocking 为 False 时 timeout 将被忽略。</li><li>release()：释放锁。</li><li>locked()：判断是否获得了锁，如果获得了锁则返回 True。</li></ul><p><strong>threading.RLock</strong></p><p>可重入锁（也称递归锁）类，一旦线程获得了重入锁，同一个线程再次获取它将不阻塞，重入锁必须由获取它的线程释放。它具有如下方法：</p><ul><li>acquire(blocking=True, timeout=-1)：解释同上。</li><li>release()：解释同上。</li></ul><p>我们对上述代码进行加锁操作，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> threading

<span class="token comment"># 创建锁</span>
lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token number">5</span>


<span class="token keyword">def</span> <span class="token function">oper</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">global</span> a
    a <span class="token operator">-=</span> b
    a <span class="token operator">+=</span> b
    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        oper<span class="token punctuation">(</span>b<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    m <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">while</span> m <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;T1&#39;</span><span class="token punctuation">)</span>
        t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;T2&#39;</span><span class="token punctuation">)</span>
        t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
        t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        m <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token number">5</span>
<span class="token number">5</span>
<span class="token number">5</span>
<span class="token number">5</span>
<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-条件对象" tabindex="-1"><a class="header-anchor" href="#_2-4-条件对象"><span>2.4 条件对象</span></a></h3><p>条件对象总是与某种类型的锁对象相关联，锁对象可以通过传入获得，或者在缺省的情况下自动创建。</p><p><strong>threading.Condition(lock=None)</strong></p><p>实现条件对象的类。它具有如下方法：</p><ul><li>acquire(*args)：请求底层锁。</li><li>release()：释放底层锁。</li><li>wait(timeout=None)：等待直到被通知或发生超时。</li><li>wait_for(predicate, timeout=None)：等待直到条件计算为 True，predicate 是一个可调用对象且它的返回值可被解释为一个布尔值。</li><li>notify(n=1)：默认唤醒一个等待该条件的线程。</li><li>notify_all()：唤醒所有正在等待该条件的线程。</li></ul><p>使用条件对象的典型场景是将锁用于同步某些共享状态的权限，那些关注某些特定状态改变的线程重复调用 wait() 方法，直到所期望的改变发生；对于修改状态的线程，它们将当前状态改变为可能是等待者所期待的新状态后，调用 notify() 方法或者 notify_all() 方法。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time

<span class="token comment"># 创建条件语句</span>
condition <span class="token operator">=</span> threading<span class="token punctuation">.</span>Condition<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 资源</span>
privilege <span class="token operator">=</span> <span class="token number">0</span>


<span class="token keyword">def</span> <span class="token function">getPri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> privilege
    condition<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    condition<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>privilege<span class="token punctuation">)</span>
    condition<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">updPri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    condition<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">global</span> privilege
    privilege <span class="token operator">=</span> <span class="token number">1</span>
    condition<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span>
    condition<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;T1&#39;</span><span class="token punctuation">,</span> target<span class="token operator">=</span>getPri<span class="token punctuation">)</span>
    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;T2&#39;</span><span class="token punctuation">,</span> target<span class="token operator">=</span>updPri<span class="token punctuation">)</span>
    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-信号量对象" tabindex="-1"><a class="header-anchor" href="#_2-5-信号量对象"><span>2.5 信号量对象</span></a></h3><p>和锁机制一样，信号量机制也是一种实现线程同步的机制，不过它比锁多了一个计数器，这个计数器主要用来计算当前剩余的锁的数量。</p><p><strong>threading.Semaphore(value=1)</strong></p><p>信号量实现类，可选参数 value 赋予内部计数器初始值，默认值为 1 。它具有如下方法：</p><ul><li>acquire(blocking=True, timeout=None)：获取一个信号量，参数 blocking 用来设置是否阻塞，timeout 用来设置阻塞时间。</li><li>release()：释放一个信号量，将内部计数器的值增加1。</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> threading

<span class="token comment"># 创建信号量</span>
s <span class="token operator">=</span> threading<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token number">5</span>


<span class="token keyword">def</span> <span class="token function">oper</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 获取信号量</span>
    s<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">global</span> a
    a <span class="token operator">-=</span> b
    a <span class="token operator">+=</span> b
    <span class="token comment"># 释放信号量</span>
    s<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        oper<span class="token punctuation">(</span>b<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    m <span class="token operator">=</span> <span class="token number">5</span>
    <span class="token keyword">while</span> m <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
        t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        m <span class="token operator">-=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-事件对象" tabindex="-1"><a class="header-anchor" href="#_2-6-事件对象"><span>2.6 事件对象</span></a></h3><p>一个线程发出事件信号，其他线程等待该信号，这是最简单的线程之间通信机制之一。</p><p><strong>threading.Event</strong></p><p>实现事件对象的类。它有如下方法：</p><ul><li>is_set()：当内部标志为 True 时返回 True。</li><li>set()：将内部标志设置为 True。</li><li>clear()：将内部标志设置为 False。</li><li>wait(timeout=None)：阻塞线程直到内部变量为 True。</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time

<span class="token comment"># 创建事件对象</span>
event <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">dis_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    event<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;同学们下课了&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">bell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;下课铃响了&#39;</span><span class="token punctuation">)</span>
    event<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>bell<span class="token punctuation">)</span>
    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>dis_class<span class="token punctuation">)</span>
    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,76),o=[p];function i(l,c){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","Python 进阶(1)多线程.html.vue"]]),k=JSON.parse('{"path":"/notes/python/%E8%BF%9B%E9%98%B6/Python%20%E8%BF%9B%E9%98%B6(1)%E5%A4%9A%E7%BA%BF%E7%A8%8B.html","title":"Python 进阶(1)多线程","lang":"zh-CN","frontmatter":{"title":"Python 进阶(1)多线程","date":"2024-05-16T00:00:00.000Z","description":"1.相关概念 1.1 解释器【虚拟机】 作为一种脚本语言，与Jscript一样，Python运行也是解释执行，所以也就需要对应的虚拟机来作为解释执行器。 Python解释执行器的工作流程就是将.py文件的代码通过虚拟机解释执行。比较常见的解释器【虚拟机】包括如下几种： CPython：官方解释器，我们从官网下载安装后获得的就是这个解释器，它使用 C 语...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/python/%E8%BF%9B%E9%98%B6/Python%20%E8%BF%9B%E9%98%B6(1)%E5%A4%9A%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Python 进阶(1)多线程"}],["meta",{"property":"og:description","content":"1.相关概念 1.1 解释器【虚拟机】 作为一种脚本语言，与Jscript一样，Python运行也是解释执行，所以也就需要对应的虚拟机来作为解释执行器。 Python解释执行器的工作流程就是将.py文件的代码通过虚拟机解释执行。比较常见的解释器【虚拟机】包括如下几种： CPython：官方解释器，我们从官网下载安装后获得的就是这个解释器，它使用 C 语..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-18T14:07:01.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-05-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-18T14:07:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 进阶(1)多线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-18T14:07:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.相关概念","slug":"_1-相关概念","link":"#_1-相关概念","children":[{"level":3,"title":"1.1 解释器【虚拟机】","slug":"_1-1-解释器【虚拟机】","link":"#_1-1-解释器【虚拟机】","children":[]},{"level":3,"title":"1.2 GIL","slug":"_1-2-gil","link":"#_1-2-gil","children":[]}]},{"level":2,"title":"2.threading","slug":"_2-threading","link":"#_2-threading","children":[{"level":3,"title":"2.1 方法属性","slug":"_2-1-方法属性","link":"#_2-1-方法属性","children":[]},{"level":3,"title":"2.2 线程对象","slug":"_2-2-线程对象","link":"#_2-2-线程对象","children":[]},{"level":3,"title":"2.3 锁对象","slug":"_2-3-锁对象","link":"#_2-3-锁对象","children":[]},{"level":3,"title":"2.4 条件对象","slug":"_2-4-条件对象","link":"#_2-4-条件对象","children":[]},{"level":3,"title":"2.5 信号量对象","slug":"_2-5-信号量对象","link":"#_2-5-信号量对象","children":[]},{"level":3,"title":"2.6 事件对象","slug":"_2-6-事件对象","link":"#_2-6-事件对象","children":[]}]}],"git":{"createdTime":1716041221000,"updatedTime":1716041221000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":1}]},"readingTime":{"minutes":9.17,"words":2752},"filePathRelative":"notes/python/进阶/Python 进阶(1)多线程.md","localizedDate":"2024年5月16日","excerpt":"<h2>1.相关概念</h2>\\n<h3>1.1 解释器【虚拟机】</h3>\\n<p>作为一种脚本语言，与Jscript一样，Python运行也是解释执行，所以也就需要对应的虚拟机来作为解释执行器。</p>\\n<p>Python解释执行器的工作流程就是将<code>.py</code>文件的代码通过虚拟机解释执行。比较常见的解释器【虚拟机】包括如下几种：</p>\\n<ul>\\n<li><strong>CPython</strong>：官方解释器，我们从官网下载安装后获得的就是这个解释器，它使用 C 语言开发，是使用范围最广泛的 Python 解释器。</li>\\n<li><strong>Jython</strong>：由 Java 编写，它可以将 Python 代码编译成 Java 字节码，再由 JVM 执行对应的字节码。</li>\\n<li><strong>IronPython</strong>：与 Jython 类似，它由 C# 编写，是运行在 .Net 平台上的解释器。</li>\\n<li><strong>IPython</strong>：基于 CPython 的一个交互式解释器，它主要增强了 CPython 的交互方式。</li>\\n<li><strong>PyPy</strong>：采用了 JIT 技术，它是一个关注执行速度的 Python 解释器，该解释器可以明显提升 Python 代码的执行速度。</li>\\n</ul>","autoDesc":true}');export{d as comp,k as data};
