import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as t,e as a}from"./app-KMmNggxv.js";const e={},p=a(`<h2 id="_1-基本操作" tabindex="-1"><a class="header-anchor" href="#_1-基本操作"><span>1.基本操作</span></a></h2><h3 id="_1-1-访问" tabindex="-1"><a class="header-anchor" href="#_1-1-访问"><span>1.1 访问</span></a></h3><p>访问单个字符</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&quot;Python&quot;</span>
<span class="token comment"># 访问第一个字符 P</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问范围内字符</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&quot;Python&quot;</span>
<span class="token comment"># 访问 yt</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 访问呢Pyt</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 访问 hon</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-单个字符编码" tabindex="-1"><a class="header-anchor" href="#_1-2-单个字符编码"><span>1.2 单个字符编码</span></a></h3><p>Python使用了<code>ord()</code>函数返回单个字符编码，<code>chr()</code>函数把编码转成相应字符。</p><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token number">65</span>
A
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-转义符" tabindex="-1"><a class="header-anchor" href="#_2-转义符"><span>2.转义符</span></a></h2><p>之前说过可以通过反斜杠 <code>\\</code> 将一行语句分多行显示，其实就是 <code>\\</code> 来转义字符，一些常见的转义字符如下表所示：</p><table><thead><tr><th style="text-align:left;">转义字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">\\</td><td style="text-align:left;">在行尾使用时，用作续行符</td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">退格（Backspace）</td></tr><tr><td style="text-align:left;">\\000</td><td style="text-align:left;">空</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">换行</td></tr><tr><td style="text-align:left;">\\v</td><td style="text-align:left;">纵向制表符</td></tr><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">横向制表符</td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">回车</td></tr></tbody></table><h2 id="_3-运算符" tabindex="-1"><a class="header-anchor" href="#_3-运算符"><span>3.运算符</span></a></h2><p>之前已经介绍了大部分运算符，下面再来详细看一下字符串运算符。</p><p>案例：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">+</td><td style="text-align:left;">连接符</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">重复输出</td></tr><tr><td style="text-align:left;">[]</td><td style="text-align:left;">通过索引获取字符串中字符</td></tr><tr><td style="text-align:left;">[ : ]</td><td style="text-align:left;">获取字符串中的一部分</td></tr><tr><td style="text-align:left;">in</td><td style="text-align:left;">字符串中是否包含指定字符</td></tr><tr><td style="text-align:left;">not in</td><td style="text-align:left;">字符串中是否不包含指定字符</td></tr><tr><td style="text-align:left;">r/R</td><td style="text-align:left;">字符串原样输出</td></tr></tbody></table><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>
s2<span class="token operator">=</span> <span class="token string">&#39;Python&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;s1 + s2--&gt;&#39;</span><span class="token punctuation">,</span>s1<span class="token operator">+</span>s2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;s1 * s2--&gt;&#39;</span><span class="token punctuation">,</span>s1<span class="token operator">*</span>s2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;s1[0]--&gt;&#39;</span><span class="token punctuation">,</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;s1[0:2]--&gt;&#39;</span><span class="token punctuation">,</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;H&quot; in s1 --&gt;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;H&#39;</span> <span class="token keyword">in</span> s1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;H&quot; not in s1 --&gt;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;H&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> s1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\\\r --&gt;&#39;</span><span class="token punctuation">,</span><span class="token string">R&#39;\\r&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>s1 <span class="token operator">+</span> s2<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span>HelloPython
s1 <span class="token operator">*</span> s2<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span>HelloHello
s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span>H
s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span>He
<span class="token string">&quot;H&quot;</span> <span class="token keyword">in</span> s1 <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token boolean">True</span>
<span class="token string">&quot;H&quot;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> s1 <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token boolean">False</span>
\\r <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span>\\r
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-格式化" tabindex="-1"><a class="header-anchor" href="#_4-格式化"><span>4.格式化</span></a></h2><p>当需要输出的内容中含有变量时，比如：<code>Hello xxx</code>，<code>xxx</code> 为变量，此时便需要一种格式化字符串的方式，Python 使用 <code>%</code> 格式化字符串，常用占位符如下表所示：</p><table><thead><tr><th style="text-align:left;">占位符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">%s</td><td style="text-align:left;">格式化字符串</td></tr><tr><td style="text-align:left;">%d</td><td style="text-align:left;">格式化整数</td></tr><tr><td style="text-align:left;">%f</td><td style="text-align:left;">格式化浮点数</td></tr></tbody></table><p>以字符转为例</p><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello %s&#39;</span><span class="token operator">%</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>Hello Python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用字符串的 <code>format()</code>方法进行格式化</p><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{0} {1}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种方式是用传入的参数一次替换字符串内的占位符{0},{1}...</p>`,35),o=[p];function l(i,c){return s(),t("div",null,o)}const u=n(e,[["render",l],["__file","Python 基础(4)字符串.html.vue"]]),k=JSON.parse('{"path":"/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(4)%E5%AD%97%E7%AC%A6%E4%B8%B2.html","title":"Python 基础(4)字符串","lang":"zh-CN","frontmatter":{"title":"Python 基础(4)字符串","date":"2024-05-11T00:00:00.000Z","description":"1.基本操作 1.1 访问 访问单个字符 访问范围内字符 1.2 单个字符编码 Python使用了ord()函数返回单个字符编码，chr()函数把编码转成相应字符。 案例： 输出结果： 2.转义符 之前说过可以通过反斜杠 \\\\ 将一行语句分多行显示，其实就是 \\\\ 来转义字符，一些常见的转义字符如下表所示： 3.运算符 之前已经介绍了大部分运算符，下面再来...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/python/%E5%9F%BA%E7%A1%80/Python%20%E5%9F%BA%E7%A1%80(4)%E5%AD%97%E7%AC%A6%E4%B8%B2.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Python 基础(4)字符串"}],["meta",{"property":"og:description","content":"1.基本操作 1.1 访问 访问单个字符 访问范围内字符 1.2 单个字符编码 Python使用了ord()函数返回单个字符编码，chr()函数把编码转成相应字符。 案例： 输出结果： 2.转义符 之前说过可以通过反斜杠 \\\\ 将一行语句分多行显示，其实就是 \\\\ 来转义字符，一些常见的转义字符如下表所示： 3.运算符 之前已经介绍了大部分运算符，下面再来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T14:40:49.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-05-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-16T14:40:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 基础(4)字符串\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-16T14:40:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.基本操作","slug":"_1-基本操作","link":"#_1-基本操作","children":[{"level":3,"title":"1.1 访问","slug":"_1-1-访问","link":"#_1-1-访问","children":[]},{"level":3,"title":"1.2 单个字符编码","slug":"_1-2-单个字符编码","link":"#_1-2-单个字符编码","children":[]}]},{"level":2,"title":"2.转义符","slug":"_2-转义符","link":"#_2-转义符","children":[]},{"level":2,"title":"3.运算符","slug":"_3-运算符","link":"#_3-运算符","children":[]},{"level":2,"title":"4.格式化","slug":"_4-格式化","link":"#_4-格式化","children":[]}],"git":{"createdTime":1715776912000,"updatedTime":1715870449000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":2}]},"readingTime":{"minutes":1.84,"words":551},"filePathRelative":"notes/python/基础/Python 基础(4)字符串.md","localizedDate":"2024年5月11日","excerpt":"<h2>1.基本操作</h2>\\n<h3>1.1 访问</h3>\\n<p>访问单个字符</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code>s <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Python\\"</span>\\n<span class=\\"token comment\\"># 访问第一个字符 P</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}');export{u as comp,k as data};
