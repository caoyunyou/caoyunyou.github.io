import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-D8yJaosk.js";const p={},e=t(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1.简介</span></a></h2><p><strong>进程</strong>：通常一个运行着的应用程序就是一个进程，比如：我启动了一个音乐播放器，现在它就是一个进程。</p><p><strong>线程</strong>：线程是进程的最小执行单元，比如：我在刚启动的音乐播放器上选了一首歌曲进行播放，这就是一个线程。</p><p>因为 GIL 的原因，CPython 解释器下的多线程牺牲了并行性，为此 Python 提供了多进程模块 <code>multiprocessing</code>，该模块同时提供了本地和远程并发，使用子进程代替线程，可以有效的避免 GIL 带来的影响，能够充分发挥机器上的多核优势，可以实现真正的并行效果，并且它与 <code>threading</code> 模块的 API 基本类似，使用起来也比较方便。</p><h2 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用"><span>2.使用</span></a></h2><h3 id="_2-1-process-类" tabindex="-1"><a class="header-anchor" href="#_2-1-process-类"><span>2.1 Process 类</span></a></h3><p><code>multiprocessing</code> 模块通过创建一个 <code>Process</code> 对象然后调用它的 <code>start()</code> 方法来生成进程，<code>Process</code> 与 <code>threading.Thread</code> API 相同。</p><p><strong>multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)</strong></p><p>进程对象，表示在单独进程中运行的活动。参数说明如下：</p><ul><li>group：仅用于兼容 threading.Thread，应该始终是 None。</li><li>target：由 run() 方法调用的可调用对象。</li><li>name：进程名。</li><li>args：目标调用的参数元组。</li><li>kwargs：目标调用的关键字参数字典。</li><li>daemon：设置进程是否为守护进程，如果是默认值 None，则该标志将从创建的进程继承。</li></ul><p>multiprocessing.Process 对象具有如下方法和属性。</p><ul><li><strong>run()</strong>：进程具体执行的方法。</li><li><strong>start()</strong>：启动进程。</li><li><strong>join([timeout])</strong>：如果可选参数 timeout 是默认值 None，则将阻塞至调用 join() 方法的进程终止；如果 timeout 是一个正数，则最多会阻塞 timeout 秒。</li><li><strong>name</strong>：进程的名称。</li><li><strong>is_alive()</strong>：返回进程是否还活着。</li><li><strong>daemon</strong>：进程的守护标志，是一个布尔值。</li><li><strong>pid</strong>：返回进程 ID。</li><li><strong>exitcode</strong>：子进程的退出代码。</li><li><strong>authkey</strong>：进程的身份验证密钥。</li><li><strong>sentinel</strong>：系统对象的数字句柄，当进程结束时将变为 ready。</li><li><strong>terminate()</strong>：终止进程。</li><li><strong>kill()</strong>：与 terminate() 相同，但在 Unix 上使用 SIGKILL 信号。</li><li><strong>close()</strong>：关闭 Process 对象，释放与之关联的所有资源。</li></ul><p>看一个使用多进程的示例。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process
<span class="token keyword">import</span> time<span class="token punctuation">,</span> os


<span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;子进程ID：&#39;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;主进程ID：&#39;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        ps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token keyword">for</span> p <span class="token keyword">in</span> ps<span class="token punctuation">:</span>
        p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当进程数量比较多时，我们可以利用进程池方便、高效的对进程进行使用和管理。</p><p><strong>multiprocessing.pool.Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])</strong></p><p>进程池对象。参数说明如下：</p><ul><li>processes：工作进程数目，如果 processes 为 None，则使用 os.cpu_count() 返回的值。</li><li>initializer：如果 initializer 不为 None，则每个工作进程将会在启动时调用 initializer(*initargs)。</li><li>maxtasksperchild：一个工作进程在它退出或被一个新的工作进程代替之前能完成的任务数量，为了释放未使用的资源。</li><li>context：用于指定启动的工作进程的上下文。</li></ul><p>有如下两种方式向进程池提交任务：</p><ul><li>apply(func[, args[, kwds]])：阻塞方式。</li><li>apply_async(func[, args[, kwds[, callback[, error_callback]]]])：非阻塞方式。</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> multiprocessing
<span class="token keyword">import</span> time


<span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token comment"># 进程池</span>
    pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> <span class="token string">&#39;p%d&#39;</span> <span class="token operator">%</span> i
        <span class="token comment"># 阻塞式</span>
        pool<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># 非阻塞</span>
        <span class="token comment"># pool.apply_async(target, (p,))</span>

    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-进程间交换数据" tabindex="-1"><a class="header-anchor" href="#_2-2-进程间交换数据"><span>2.2 进程间交换数据</span></a></h3><h4 id="_2-2-1-管道" tabindex="-1"><a class="header-anchor" href="#_2-2-1-管道"><span>2.2.1 管道</span></a></h4><p><strong>multiprocessing.Pipe([duplex])</strong></p><p>返回一对 Connection 对象 (conn1, conn2) ， 分别表示管道的两端；如果 duplex 被置为 True (默认值)，那么该管道是双向的，否则管道是单向的。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pipe<span class="token punctuation">,</span> Process


<span class="token keyword">def</span> <span class="token function">setData</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">printData</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token string">&#39;曹云友&#39;</span>
    <span class="token comment"># 创建管道返回管道的两端</span>
    conn1<span class="token punctuation">,</span> conn2 <span class="token operator">=</span> Pipe<span class="token punctuation">(</span><span class="token punctuation">)</span>

    p1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>setData<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>conn1<span class="token punctuation">,</span> data<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p2 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>printData<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>conn2<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-队列" tabindex="-1"><a class="header-anchor" href="#_2-2-2-队列"><span>2.2.2 队列</span></a></h4><p><strong>multiprocessing.Queue([maxsize])</strong></p><p>返回一个共享队列实例。具有如下方法：</p><ul><li><strong>qsize()</strong>：返回队列的大致长度。</li><li><strong>empty()</strong>：如果队列是空的，返回 True，反之返回 False。</li><li><strong>full()</strong>：如果队列是满的，返回 True，反之返回 False。</li><li><strong>put(obj[, block[, timeout]])</strong>：将 obj 放入队列。</li><li><strong>put_nowait(obj)</strong>：相当于 put(obj, False)。</li><li><strong>get([block[, timeout]])</strong>：从队列中取出并返回对象。</li><li><strong>get_nowait()</strong>：相当于 get(False)。</li><li><strong>close()</strong>：指示当前进程将不会再往队列中放入对象。</li><li><strong>join_thread()</strong>：等待后台线程。</li><li><strong>cancel_join_thread()</strong>：防止进程退出时自动等待后台线程退出。</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Queue<span class="token punctuation">,</span> Process


<span class="token keyword">def</span> <span class="token function">setData</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> Queue<span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">printData</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> Queue<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token string">&#39;曹云友&#39;</span>
    <span class="token comment"># 创建管道返回管道的两端</span>
    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>

    p1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>setData<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> data<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p2 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>printData<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-进程间同步" tabindex="-1"><a class="header-anchor" href="#_2-3-进程间同步"><span>2.3 进程间同步</span></a></h3><p>多进程之间不共享数据，但共享同一套文件系统，像访问同一个文件、同一终端打印，如果不进行同步操作，就会出现错乱的现象。</p><p>所有在 threading 存在的同步方式，multiprocessing 中都有类似的等价物，如：锁、信号量等。以锁的方式为例，我们来看一个终端打印例子。</p><p><strong>不加锁</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process
<span class="token keyword">import</span> os<span class="token punctuation">,</span> time


<span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;p%s is start&#39;</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;p%s is end&#39;</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>p12944 <span class="token keyword">is</span> start
p35460 <span class="token keyword">is</span> start
p27676 <span class="token keyword">is</span> start
p12944 <span class="token keyword">is</span> end
p35460 <span class="token keyword">is</span> end
p27676 <span class="token keyword">is</span> end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>加锁</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Lock
<span class="token keyword">import</span> os<span class="token punctuation">,</span> time


<span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span>lock<span class="token punctuation">:</span> Lock<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;p%s is start&#39;</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;p%s is end&#39;</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>p17964 <span class="token keyword">is</span> start
p17964 <span class="token keyword">is</span> end
p58224 <span class="token keyword">is</span> start
p58224 <span class="token keyword">is</span> end
p56272 <span class="token keyword">is</span> start
p56272 <span class="token keyword">is</span> end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-进程间共享状态" tabindex="-1"><a class="header-anchor" href="#_2-4-进程间共享状态"><span>2.4 进程间共享状态</span></a></h3><p>并发编程时，通常尽量避免使用共享状态，但如果有一些数据确实需要在进程之间共享怎么办呢？对于这种情况，multiprocessing 模块提供了两种方式。</p><h4 id="_2-4-1-共享内存" tabindex="-1"><a class="header-anchor" href="#_2-4-1-共享内存"><span>2.4.1 共享内存</span></a></h4><p><strong>multiprocessing.Value(typecode_or_type, *args, lock=True)</strong></p><p>返回一个从共享内存上创建的对象。参数说明如下：</p><ul><li>typecode_or_type：返回的对象类型。</li><li>*args：传给类的构造函数。</li><li>lock：如果 lock 值是 True（默认值），将会新建一个递归锁用于同步此值的访问操作；如果 lock 值是 Lock、RLock 对象，那么这个传入的锁将会用于同步这个值的访问操作；如果 lock 是 False，那么对这个对象的访问将没有锁保护，也就是说这个变量不是进程安全的。</li></ul><p><strong>multiprocessing.Array(typecode_or_type, size_or_initializer, *, lock=True)</strong></p><p>从共享内存中申请并返回一个数组对象。</p><ul><li>typecode_or_type：返回的数组中的元素类型。</li><li>size_or_initializer：如果参数值是一个整数，则会当做数组的长度；否则参数会被当成一个序列用于初始化数组中的每一个元素，并且会根据元素个数自动判断数组的长度。</li><li>lock：说明同上。</li></ul><p>使用 Value 或 Array 将数据存储在共享内存映射中。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Value<span class="token punctuation">,</span> Array


<span class="token keyword">def</span> <span class="token function">setData</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> Value<span class="token punctuation">,</span> a<span class="token punctuation">:</span> Array<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    n<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1024</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">printData</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> Value<span class="token punctuation">,</span> a<span class="token punctuation">:</span> Array<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    num <span class="token operator">=</span> Value<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span>
    arr <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;=================&quot;</span><span class="token punctuation">)</span>
    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>setData<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-服务进程" tabindex="-1"><a class="header-anchor" href="#_2-4-2-服务进程"><span>2.4.2 服务进程</span></a></h4><p>由 Manager() 返回的管理器对象控制一个服务进程，该进程保存 Python 对象并允许其他进程使用代理操作它们。</p><p>Manager() 返回的管理器支持类型包括：list、dict、Namespace、Lock、RLock、Semaphore、BoundedSemaphore、Condition、Event、Barrier、Queue、Value 和 Array。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Manager


<span class="token keyword">def</span> <span class="token function">setData</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">,</span> l<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>
    d<span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>
    l<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> Manager<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> manager<span class="token punctuation">:</span>
        d <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        l <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;========================&quot;</span><span class="token punctuation">)</span>
        p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>setData<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> l<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),o=[e];function i(c,l){return s(),a("div",null,o)}const d=n(p,[["render",i],["__file","Python 进阶(2)多进程.html.vue"]]),k=JSON.parse('{"path":"/notes/python/%E8%BF%9B%E9%98%B6/Python%20%E8%BF%9B%E9%98%B6(2)%E5%A4%9A%E8%BF%9B%E7%A8%8B.html","title":"Python 进阶(2)多进程","lang":"zh-CN","frontmatter":{"title":"Python 进阶(2)多进程","date":"2024-05-16T00:00:00.000Z","description":"1.简介 进程：通常一个运行着的应用程序就是一个进程，比如：我启动了一个音乐播放器，现在它就是一个进程。 线程：线程是进程的最小执行单元，比如：我在刚启动的音乐播放器上选了一首歌曲进行播放，这就是一个线程。 因为 GIL 的原因，CPython 解释器下的多线程牺牲了并行性，为此 Python 提供了多进程模块 multiprocessing，该模块同...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/python/%E8%BF%9B%E9%98%B6/Python%20%E8%BF%9B%E9%98%B6(2)%E5%A4%9A%E8%BF%9B%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"曹云友的博客"}],["meta",{"property":"og:title","content":"Python 进阶(2)多进程"}],["meta",{"property":"og:description","content":"1.简介 进程：通常一个运行着的应用程序就是一个进程，比如：我启动了一个音乐播放器，现在它就是一个进程。 线程：线程是进程的最小执行单元，比如：我在刚启动的音乐播放器上选了一首歌曲进行播放，这就是一个线程。 因为 GIL 的原因，CPython 解释器下的多线程牺牲了并行性，为此 Python 提供了多进程模块 multiprocessing，该模块同..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-18T14:07:01.000Z"}],["meta",{"property":"article:author","content":"曹云友"}],["meta",{"property":"article:published_time","content":"2024-05-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-18T14:07:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 进阶(2)多进程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-18T14:07:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"曹云友\\",\\"url\\":\\"https://caoyunyou.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2.使用","slug":"_2-使用","link":"#_2-使用","children":[{"level":3,"title":"2.1 Process 类","slug":"_2-1-process-类","link":"#_2-1-process-类","children":[]},{"level":3,"title":"2.2 进程间交换数据","slug":"_2-2-进程间交换数据","link":"#_2-2-进程间交换数据","children":[]},{"level":3,"title":"2.3 进程间同步","slug":"_2-3-进程间同步","link":"#_2-3-进程间同步","children":[]},{"level":3,"title":"2.4 进程间共享状态","slug":"_2-4-进程间共享状态","link":"#_2-4-进程间共享状态","children":[]}]}],"git":{"createdTime":1716041221000,"updatedTime":1716041221000,"contributors":[{"name":"曹云友","email":"caoyunyou@foxmail.com","commits":1}]},"readingTime":{"minutes":6.41,"words":1924},"filePathRelative":"notes/python/进阶/Python 进阶(2)多进程.md","localizedDate":"2024年5月16日","excerpt":"<h2>1.简介</h2>\\n<p><strong>进程</strong>：通常一个运行着的应用程序就是一个进程，比如：我启动了一个音乐播放器，现在它就是一个进程。</p>\\n<p><strong>线程</strong>：线程是进程的最小执行单元，比如：我在刚启动的音乐播放器上选了一首歌曲进行播放，这就是一个线程。</p>\\n<p>因为 GIL 的原因，CPython 解释器下的多线程牺牲了并行性，为此 Python 提供了多进程模块 <code>multiprocessing</code>，该模块同时提供了本地和远程并发，使用子进程代替线程，可以有效的避免 GIL 带来的影响，能够充分发挥机器上的多核优势，可以实现真正的并行效果，并且它与 <code>threading</code> 模块的 API 基本类似，使用起来也比较方便。</p>","autoDesc":true}');export{d as comp,k as data};
